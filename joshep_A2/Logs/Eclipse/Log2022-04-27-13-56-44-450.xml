<Events startTimestamp="1651082204450" logVersion="1.0.0.202201202038">
  <Command __id="1" _type="MoveCaretCommand" caretOffset="397" date="Wed Apr 27 13:56:45 EDT 2022" docOffset="522" starttimestamp="1651082204450" timestamp="807" />
  <Command __id="3" _type="PauseCommand" date="Wed Apr 27 13:58:46 EDT 2022" range="2m-5m" starttimestamp="1651082204450" timestamp="122448">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[121634]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="33" _type="ShellCommand" date="Wed Apr 27 14:01:02 EDT 2022" starttimestamp="1651082204450" timestamp="257894" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="36" _type="PauseCommand" date="Wed Apr 27 14:02:12 EDT 2022" range="1m-2m" starttimestamp="1651082204450" timestamp="328266">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[70372]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="37" _type="DiffBasedFileOpenCommand" date="Wed Apr 27 14:02:15 EDT 2022" docASTNodeCount="1005" docActiveCodeLength="6981" docExpressionCount="608" docLength="9048" projectName="joshep_A1" starttimestamp="1651082204450" timestamp="330765">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\joshep_A1\src\a1\SocialDistancing.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package a1;

import java.util.ArrayList;
import java.util.List;


public class SocialDistancing {
	/*	public static void main(String[] args) {
		System.out.println("Yo");
	}
	 */	
	static final int smallDistance = 6;
	static final int mediumDistance = 13;
	static final int largeDistance = 27;
	
	static final int smallDuration = 15;
	static final int mediumDuration = 30;
	static final int largeDuration = 120;
	
	static final int smallExhale = 10;
	static final int mediumExhale = 30;
	static final int largeExhale = 50;
	
	static int tenRepetitions = 10;
	/**
	If the combination of the method parameters is safe, based on the given data, the function
	returns true. Otherwise, it returns false.
	*/	
	public static boolean isGivenSafe(int distance, int duration, int exhale) {
		if(distance == smallDistance) { 					//small distance
			if(duration == mediumDuration) {							//med duration
				if(exhale == smallExhale) {					//small exhale
					return true;
				}
			} else if (duration == smallDuration) {					//small duration
				if(exhale == mediumExhale) {					//med exhale
					return true;
				}
			}	
		}else if(distance == mediumDistance) {							//med distance
			if(duration == mediumDuration) {								//med duration
				if(exhale == mediumExhale) {						//med exhale
					return true;
				}
			} else if(duration == smallDuration) {						//small duration
				if(exhale == largeExhale) {						//large exhale
					return true;
				}
			}else if(duration == largeDuration) {						//large duration
				if(exhale == smallExhale) {						//small exhale
					return true;
				}
			}
		}else if(distance == largeDistance) {							//large distance
			if(duration == mediumDuration) {								//med duration
				if(exhale == largeExhale) {						//large exhale
					return true;
				}
			} else if (duration == largeDuration) {					//large duration
				if(exhale == mediumExhale) {						//med exhale
					return true;
				}
			}
		}
		return false;
	}
	/* 	higher distance are safe, so interpolate low (can have 0)
		lower duration and exhale are safe, so interpolate high (can have max integer) Integer.MAX_VALUE
	*/
	public static boolean isInterpolatedSafe(int distance, int duration, int exhale) {
		
		int interpolatedDistance = distanceLowInterpolation(distance);
		int interpolatedDuration = durationHighInterpolation(duration);
		int interpolatedExhale = exhaleHighInterpolation(exhale);
		return isGivenSafe(interpolatedDistance, interpolatedDuration, interpolatedExhale);
		
	}
	public static boolean isInterpolatedSafe(int distance, int duration) {
		//exhalation level set to medium
		int interpolatedDistance = distanceLowInterpolation(distance);
		int interpolatedDuration = durationHighInterpolation(duration);
		return isInterpolatedSafe(interpolatedDistance, interpolatedDuration, mediumExhale);
	}
	public static boolean isInterpolatedSafe(int distance) {
		//duration and exhalation levels set to medium
		int interpolatedDistance = distanceLowInterpolation(distance);
		return isInterpolatedSafe(interpolatedDistance, mediumDuration);
	}
	public static boolean isDerivedSafe (int distance, int duration, int exhale) {
		if(distance >= smallDistance && duration <= mediumDuration && exhale <= smallExhale) { 	//sDist,mDur,sEx
			return true;
		}
		if(distance >= smallDistance && duration <= smallDuration && exhale <= mediumExhale) { 	//sDist,sDur,mEx
			return true;
		}
		if(distance >= mediumDistance && duration <= mediumDuration && exhale <= mediumExhale) { 	//mDist,mDur,mEx
			return true;
		}
		if(distance >= mediumDistance && duration <= smallDuration && exhale <= largeExhale) { 	//mDist,sDur,lEx
			return true;
		}
		if(distance >= mediumDistance && duration <= largeDuration && exhale <= smallExhale) { 	//mDist,lDur,sEx
			return true;
		}
		if(distance >= largeDistance && duration <= mediumDuration && exhale <= largeExhale) { 	//lDist,mDur,lEx
			return true;
		}
		if(distance >= largeDistance && duration <= largeDuration && exhale <= mediumExhale) { 	//lDist,lDur,mEx
			return true;
		}
		return false;
	}
	public static void printGeneratedCombinationDerivedSafety() {
		 int distance = (int)(Math.random()*32);
		 int duration = (int)(Math.random()*144);
		 int exhale = (int)(Math.random()*60);

		 boolean derivedResult = isDerivedSafe(distance, duration, exhale);
		System.out.println(distance + "," + duration + "," + exhale + "," + derivedResult);
	}
	public static void printGivenAndGeneratedCombinationsDerivedSafety() {
		System.out.println("Distance,Duration,Exhalation,IsSafe");
		System.out.println("13,30,30,true");
		System.out.println("6,30,10,true");
		System.out.println("27,30,50,true");
		System.out.println("13,15,50,true");
		System.out.println("13,120,10,true");
		System.out.println("27,120,30,true");
		System.out.println("6,15,30,true");
		System.out.println("----------");
		for(int i = 0; i < tenRepetitions; i++) {
			printGeneratedCombinationDerivedSafety();
		}
	}
	public static List<Integer[]> generateSafeDistancesAndDurations(int exhale) {
		int interpolatedExhale = exhaleHighInterpolation(exhale);
		List<Integer[]> list = new ArrayList<Integer[]>();
		if (interpolatedExhale < 0) {return list;}
		if (interpolatedExhale == smallExhale) { 								//small exhale
			 Integer[] a1 = {6,30};
			 Integer[] a2 = {13,120};
			list.add(a1);
			list.add(a2);
			return list;
		} else if (interpolatedExhale == mediumExhale) {			//med exhale
			 Integer[] a1 = {13,30};
			 Integer[] a2 = {27,120};
			 Integer[] a3 = {6,15};
			list.add(0, a1);
			list.add(1, a2);
			list.add(2, a3);
			return list;
		} else if (interpolatedExhale == largeExhale) {						//large exhale
			 Integer[] a1 = {27,30};
			 Integer[] a2 = {13,15};
			list.add(0, a1);
			list.add(1, a2);
			return list;
		};
		return list;
	}
	public static void printSafeDistancesAndDurations(int exhale) {
		List<Integer[]> generatedList = generateSafeDistancesAndDurations(exhale);
		System.out.print(exhale + ",[");
		for (int i = 0; i < generatedList.size(); i++) {
			System.out.print("{");
			for (int jay = 0; jay < generatedList.get(i).length; jay++) {
				System.out.print(generatedList.get(i)[jay]);
				if (jay != generatedList.get(i).length - 1) {
					System.out.print(",");
				}
			}
			System.out.print("}");
		}
		System.out.print("]");
		System.out.print("\n");
	}
	/**
	  low interpolation to a sequence of values is either an element of the sequence or zero.
	  If higher values of the parameter are safer, then it is interpolated low. 
	 */
	public static int distanceLowInterpolation(int distance) {
		//low interpolation to a sequence of values is either an element of the sequence or zero
		//If higher values of the parameter are safer, then it is interpolated low
		int interpolatedDistance;
		if (distance < smallDistance) {					//distance interpolation
			interpolatedDistance = 0;
		} else if(distance < mediumDistance) {
			interpolatedDistance = smallDistance;
		} else if(distance < largeDistance) {
			interpolatedDistance = mediumDistance;
		} else {
			interpolatedDistance = largeDistance;
		}
		return interpolatedDistance;
	}
	/**
	  high interpolation to a sequence of values is either an element of the sequence or max integer.If lower values of the parameter are safer, then it is interpolated high.
	 */
	
	public static int durationHighInterpolation(int duration) {
		//high interpolation to a sequence of values is either an element of the sequence or max integer
		//If lower values of the parameter are safer, then it is interpolated high.
		int interpolatedDuration;
		if (duration > largeDuration) {					//duration interpolation
			interpolatedDuration = Integer.MAX_VALUE;
		} else if(duration > mediumDuration) {
			interpolatedDuration = largeDuration;
		} else if(duration > smallDuration) {
			interpolatedDuration = mediumDuration;
		} else {
			interpolatedDuration = smallDuration;
		}
		return interpolatedDuration;
	}	
	/**
	 Similarly, the exhalation level parameter is interpolated to small, medium large exhalation levels
	 or the maximum integer. In Java, the maximum integer is Integer.MAX_VALUE. If lower values of the parameter are safer, then it is interpolated high.
	 */
	public static int exhaleHighInterpolation(int exhalation) {
		//high interpolation to a sequence of values is either an element of the sequence or max integer
		//If lower values of the parameter are safer, then it is interpolated high.
		int interpolatedExhalation;
		if (exhalation > largeExhale) {						//exhale interpolation
			interpolatedExhalation = Integer.MAX_VALUE;
		} else if(exhalation > mediumExhale) {
			interpolatedExhalation = largeExhale;
		} else if(exhalation > smallExhale) {
			interpolatedExhalation = mediumExhale;
		} else {
			interpolatedExhalation = smallExhale;
		}
		return interpolatedExhalation;
	}
}
]]></snapshot>
  </Command>
  <Command __id="39" _type="SelectTextCommand" caretOffset="203" date="Wed Apr 27 14:02:15 EDT 2022" end="203" start="168" starttimestamp="1651082204450" timestamp="330886" />
  <Command __id="41" _type="MoveCaretCommand" caretOffset="397" date="Wed Apr 27 14:02:15 EDT 2022" docOffset="522" starttimestamp="1651082204450" timestamp="331325" />
  <Command __id="43" _type="PauseCommand" date="Wed Apr 27 14:02:17 EDT 2022" range="1s-2s" starttimestamp="1651082204450" timestamp="332842">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1517]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="42" _type="ShellCommand" date="Wed Apr 27 14:02:17 EDT 2022" starttimestamp="1651082204450" timestamp="332842" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="45" _type="PauseCommand" date="Wed Apr 27 14:03:02 EDT 2022" range="30s-1m" starttimestamp="1651082204450" timestamp="377683">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[44841]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="44" _type="ShellCommand" date="Wed Apr 27 14:03:02 EDT 2022" starttimestamp="1651082204450" timestamp="377683" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="46" _type="ShellCommand" date="Wed Apr 27 14:03:02 EDT 2022" starttimestamp="1651082204450" timestamp="378052" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="48" _type="PauseCommand" date="Wed Apr 27 14:14:05 EDT 2022" range="10m-20m" starttimestamp="1651082204450" timestamp="1041370">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[663318]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="47" _type="ShellCommand" date="Wed Apr 27 14:14:05 EDT 2022" starttimestamp="1651082204450" timestamp="1041370" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="49" _type="ShellCommand" date="Wed Apr 27 14:14:06 EDT 2022" starttimestamp="1651082204450" timestamp="1041954" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="51" _type="PauseCommand" date="Wed Apr 27 14:14:46 EDT 2022" range="30s-1m" starttimestamp="1651082204450" timestamp="1082542">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[40588]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
</Events>
