<Events startTimestamp="1651603184346" logVersion="1.0.0.202201202038">
  <Command __id="18" _type="EclipseCommand" commandID="" date="Tue May 03 14:40:12 EDT 2022" starttimestamp="1651603184346" timestamp="27944" />
  <Command __id="19" _type="ShellCommand" date="Tue May 03 14:40:12 EDT 2022" starttimestamp="1651603184346" timestamp="28054" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="21" _type="PauseCommand" date="Tue May 03 14:40:14 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="30519">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2464]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="20" _type="ShellCommand" date="Tue May 03 14:40:14 EDT 2022" starttimestamp="1651603184346" timestamp="30518" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="23" _type="PauseCommand" date="Tue May 03 14:40:21 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="37401">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6883]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="22" _type="ShellCommand" date="Tue May 03 14:40:21 EDT 2022" starttimestamp="1651603184346" timestamp="37401" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="25" _type="PauseCommand" date="Tue May 03 14:40:37 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="52728">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15326]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="26" _type="ShellCommand" date="Tue May 03 14:40:37 EDT 2022" starttimestamp="1651603184346" timestamp="52816" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="28" _type="PauseCommand" date="Tue May 03 14:41:28 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="103860">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[51044]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="27" _type="ShellCommand" date="Tue May 03 14:41:28 EDT 2022" starttimestamp="1651603184346" timestamp="103860" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="30" _type="PauseCommand" date="Tue May 03 14:41:33 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="109086">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5226]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="29" _type="ShellCommand" date="Tue May 03 14:41:33 EDT 2022" starttimestamp="1651603184346" timestamp="109086" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="31" _type="ShellCommand" date="Tue May 03 14:41:33 EDT 2022" starttimestamp="1651603184346" timestamp="109519" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="33" _type="PauseCommand" date="Tue May 03 14:41:36 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="111793">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2274]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="32" _type="ShellCommand" date="Tue May 03 14:41:36 EDT 2022" starttimestamp="1651603184346" timestamp="111793" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="35" _type="PauseCommand" date="Tue May 03 14:42:03 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="139230">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[27437]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="34" _type="ShellCommand" date="Tue May 03 14:42:03 EDT 2022" starttimestamp="1651603184346" timestamp="139230" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="37" _type="PauseCommand" date="Tue May 03 14:43:26 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="222474">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[83244]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="36" _type="ShellCommand" date="Tue May 03 14:43:26 EDT 2022" starttimestamp="1651603184346" timestamp="222474" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="39" _type="PauseCommand" date="Tue May 03 14:43:32 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="228129">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5655]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="38" _type="ShellCommand" date="Tue May 03 14:43:32 EDT 2022" starttimestamp="1651603184346" timestamp="228129" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="41" _type="PauseCommand" date="Tue May 03 14:46:55 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="431053">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[202924]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="40" _type="ShellCommand" date="Tue May 03 14:46:55 EDT 2022" starttimestamp="1651603184346" timestamp="431053" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="42" _type="ShellCommand" date="Tue May 03 14:46:55 EDT 2022" starttimestamp="1651603184346" timestamp="431195" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="44" _type="PauseCommand" date="Tue May 03 14:48:26 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="522248">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[91053]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="43" _type="ShellCommand" date="Tue May 03 14:48:26 EDT 2022" starttimestamp="1651603184346" timestamp="522248" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="46" _type="PauseCommand" date="Tue May 03 14:48:29 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="524845">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2597]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="45" _type="ShellCommand" date="Tue May 03 14:48:29 EDT 2022" starttimestamp="1651603184346" timestamp="524845" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="48" _type="PauseCommand" date="Tue May 03 14:48:36 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="531979">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7134]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="47" _type="ShellCommand" date="Tue May 03 14:48:36 EDT 2022" starttimestamp="1651603184346" timestamp="531979" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="50" _type="PauseCommand" date="Tue May 03 14:48:45 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="541433">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9454]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="49" _type="ShellCommand" date="Tue May 03 14:48:45 EDT 2022" starttimestamp="1651603184346" timestamp="541433" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="52" _type="PauseCommand" date="Tue May 03 14:48:59 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="555186">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13753]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="51" _type="ShellCommand" date="Tue May 03 14:48:59 EDT 2022" starttimestamp="1651603184346" timestamp="555186" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="53" _type="ShellCommand" date="Tue May 03 14:49:00 EDT 2022" starttimestamp="1651603184346" timestamp="556108" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="55" _type="PauseCommand" date="Tue May 03 14:51:28 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="703871">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[147763]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="54" _type="ShellCommand" date="Tue May 03 14:51:28 EDT 2022" starttimestamp="1651603184346" timestamp="703871" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="57" _type="PauseCommand" date="Tue May 03 14:51:31 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="707250">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3379]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="56" _type="ShellCommand" date="Tue May 03 14:51:31 EDT 2022" starttimestamp="1651603184346" timestamp="707250" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="59" _type="PauseCommand" date="Tue May 03 14:51:39 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="714968">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7718]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="58" _type="ShellCommand" date="Tue May 03 14:51:39 EDT 2022" starttimestamp="1651603184346" timestamp="714968" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="60" _type="ShellCommand" date="Tue May 03 14:51:39 EDT 2022" starttimestamp="1651603184346" timestamp="715091" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="62" _type="PauseCommand" date="Tue May 03 14:52:11 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="747199">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[32108]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="61" _type="ShellCommand" date="Tue May 03 14:52:11 EDT 2022" starttimestamp="1651603184346" timestamp="747199" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="24" _type="DiffBasedFileOpenCommand" date="Tue May 03 14:40:37 EDT 2022" docLength="0" projectName="SML" starttimestamp="1651603184346" timestamp="52727">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\example.sml]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[]]></snapshot>
  </Command>
  <Command __id="64" _type="PauseCommand" date="Tue May 03 14:52:14 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="749669">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2470]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="66" _type="PauseCommand" date="Tue May 03 14:52:16 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="752515">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[2846]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="65" _type="ShellCommand" date="Tue May 03 14:52:16 EDT 2022" starttimestamp="1651603184346" timestamp="752515" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="68" _type="PauseCommand" date="Tue May 03 14:52:28 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="764449">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11934]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="67" _type="ShellCommand" date="Tue May 03 14:52:28 EDT 2022" starttimestamp="1651603184346" timestamp="764449" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="70" _type="PauseCommand" date="Tue May 03 14:52:31 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="766696">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2246]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="69" _type="ShellCommand" date="Tue May 03 14:52:31 EDT 2022" starttimestamp="1651603184346" timestamp="766695" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="72" _type="PauseCommand" date="Tue May 03 14:52:52 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="787909">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[21214]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="71" _type="ShellCommand" date="Tue May 03 14:52:52 EDT 2022" starttimestamp="1651603184346" timestamp="787909" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="74" _type="PauseCommand" date="Tue May 03 14:52:54 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="790444">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2535]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="73" _type="ShellCommand" date="Tue May 03 14:52:54 EDT 2022" starttimestamp="1651603184346" timestamp="790444" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="76" _type="PauseCommand" date="Tue May 03 14:52:56 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="792379">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1935]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="75" _type="ShellCommand" date="Tue May 03 14:52:56 EDT 2022" starttimestamp="1651603184346" timestamp="792379" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="77" _type="ExceptionCommand" date="Tue May 03 14:52:57 EDT 2022" starttimestamp="1651603184346" timestamp="793151" type="Exception">
    <exceptionString><![CDATA[Standard ML of New Jersey (32-bit) v110.98 [built: Fri Jul 17 15:16:19 2020]
- [opening example.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
example.sml:2.12-2.17 Error: unbound variable or constructor: fold1

val it = () : unit
- 
]]></exceptionString>
    <language><![CDATA[SML]]></language>
  </Command>
  <Command __id="78" _type="ConsoleOutput" date="Tue May 03 14:52:57 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="793151" type="ConsoleOutput">
    <outputString><![CDATA[Standard ML of New Jersey (32-bit) v110.98 [built: Fri Jul 17 15:16:19 2020]
- [opening example.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
example.sml:2.12-2.17 Error: unbound variable or constructor: fold1

val it = () : unit
- 
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="63" _type="DiffBasedFileOpenCommand" date="Tue May 03 14:52:14 EDT 2022" docLength="135" projectName="SML" starttimestamp="1651603184346" timestamp="749669">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\example.sml]]></filePath>
    <diff><![CDATA[[Diff(INSERT,"structure Sum = struct¶	val sum = fold1 (op +) 0¶	fun println s = print (s ^ "\n")¶	val printSum = println o Int.toString o sum¶end")]]]></diff>
    <snapshot><![CDATA[structure Sum = struct
	val sum = fold1 (op +) 0
	fun println s = print (s ^ "\n")
	val printSum = println o Int.toString o sum
end]]></snapshot>
  </Command>
  <Command __id="80" _type="PauseCommand" date="Tue May 03 14:53:31 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="827041">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[33890]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="82" _type="PauseCommand" date="Tue May 03 14:53:44 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="839998">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[12957]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="81" _type="ShellCommand" date="Tue May 03 14:53:44 EDT 2022" starttimestamp="1651603184346" timestamp="839998" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="84" _type="PauseCommand" date="Tue May 03 14:53:49 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="845536">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5538]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="83" _type="ShellCommand" date="Tue May 03 14:53:49 EDT 2022" starttimestamp="1651603184346" timestamp="845536" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="86" _type="PauseCommand" date="Tue May 03 14:54:16 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="872214">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26678]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="85" _type="ShellCommand" date="Tue May 03 14:54:16 EDT 2022" starttimestamp="1651603184346" timestamp="872214" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="88" _type="PauseCommand" date="Tue May 03 14:54:23 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="878957">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6743]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="87" _type="ShellCommand" date="Tue May 03 14:54:23 EDT 2022" starttimestamp="1651603184346" timestamp="878957" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="89" _type="ShellCommand" date="Tue May 03 14:54:23 EDT 2022" starttimestamp="1651603184346" timestamp="879413" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="91" _type="PauseCommand" date="Tue May 03 14:54:38 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="894645">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15232]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="90" _type="ShellCommand" date="Tue May 03 14:54:38 EDT 2022" starttimestamp="1651603184346" timestamp="894645" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="93" _type="PauseCommand" date="Tue May 03 14:55:01 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="917575">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22930]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="92" _type="ShellCommand" date="Tue May 03 14:55:01 EDT 2022" starttimestamp="1651603184346" timestamp="917575" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="95" _type="PauseCommand" date="Tue May 03 14:55:52 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="968209">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[50634]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="94" _type="ShellCommand" date="Tue May 03 14:55:52 EDT 2022" starttimestamp="1651603184346" timestamp="968209" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="97" _type="PauseCommand" date="Tue May 03 14:56:10 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="986312">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18103]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="96" _type="ShellCommand" date="Tue May 03 14:56:10 EDT 2022" starttimestamp="1651603184346" timestamp="986312" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="99" _type="PauseCommand" date="Tue May 03 14:56:54 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="1030606">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[44294]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="98" _type="ShellCommand" date="Tue May 03 14:56:54 EDT 2022" starttimestamp="1651603184346" timestamp="1030606" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="101" _type="PauseCommand" date="Tue May 03 14:56:57 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="1033256">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2650]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="100" _type="ShellCommand" date="Tue May 03 14:56:57 EDT 2022" starttimestamp="1651603184346" timestamp="1033256" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="103" _type="PauseCommand" date="Tue May 03 14:57:07 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="1043456">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10200]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="116" _type="ShellCommand" date="Tue May 03 15:01:47 EDT 2022" starttimestamp="1651603184346" timestamp="1322654" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="119" _type="PauseCommand" date="Tue May 03 15:01:53 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="1329554">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6900]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="118" _type="ShellCommand" date="Tue May 03 15:01:53 EDT 2022" starttimestamp="1651603184346" timestamp="1329554" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="121" _type="PauseCommand" date="Tue May 03 15:02:01 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="1337626">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8072]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="120" _type="ShellCommand" date="Tue May 03 15:02:01 EDT 2022" starttimestamp="1651603184346" timestamp="1337626" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="122" _type="EclipseCommand" commandID="org.eclipse.ui.edit.rename" date="Tue May 03 15:02:02 EDT 2022" starttimestamp="1651603184346" timestamp="1337659" />
  <Command __id="124" _type="PauseCommand" date="Tue May 03 15:02:07 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="1343409">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5749]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="123" _type="ShellCommand" date="Tue May 03 15:02:07 EDT 2022" starttimestamp="1651603184346" timestamp="1343408" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="126" _type="PauseCommand" date="Tue May 03 15:02:56 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="1391818">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[48410]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="125" _type="ShellCommand" date="Tue May 03 15:02:56 EDT 2022" starttimestamp="1651603184346" timestamp="1391818" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="127" _type="ShellCommand" date="Tue May 03 15:02:57 EDT 2022" starttimestamp="1651603184346" timestamp="1392799" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="129" _type="PauseCommand" date="Tue May 03 15:06:25 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="1601199">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[208400]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="128" _type="ShellCommand" date="Tue May 03 15:06:25 EDT 2022" starttimestamp="1651603184346" timestamp="1601199" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="131" _type="PauseCommand" date="Tue May 03 15:06:29 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="1604776">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3577]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="130" _type="ShellCommand" date="Tue May 03 15:06:29 EDT 2022" starttimestamp="1651603184346" timestamp="1604776" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="133" _type="PauseCommand" date="Tue May 03 15:06:39 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="1614962">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10186]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="132" _type="ShellCommand" date="Tue May 03 15:06:39 EDT 2022" starttimestamp="1651603184346" timestamp="1614962" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="134" _type="ShellCommand" date="Tue May 03 15:06:39 EDT 2022" starttimestamp="1651603184346" timestamp="1615653" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="136" _type="PauseCommand" date="Tue May 03 15:07:27 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="1662879">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[47226]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="135" _type="ShellCommand" date="Tue May 03 15:07:27 EDT 2022" starttimestamp="1651603184346" timestamp="1662879" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="138" _type="PauseCommand" date="Tue May 03 15:07:29 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="1665154">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2275]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="137" _type="ShellCommand" date="Tue May 03 15:07:29 EDT 2022" starttimestamp="1651603184346" timestamp="1665154" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="140" _type="PauseCommand" date="Tue May 03 15:07:35 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="1670845">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5691]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="139" _type="ShellCommand" date="Tue May 03 15:07:35 EDT 2022" starttimestamp="1651603184346" timestamp="1670845" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="142" _type="PauseCommand" date="Tue May 03 15:07:40 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="1676150">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5305]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="141" _type="ShellCommand" date="Tue May 03 15:07:40 EDT 2022" starttimestamp="1651603184346" timestamp="1676150" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="144" _type="PauseCommand" date="Tue May 03 15:07:45 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="1681540">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5390]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="143" _type="ShellCommand" date="Tue May 03 15:07:45 EDT 2022" starttimestamp="1651603184346" timestamp="1681540" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="145" _type="ShellCommand" date="Tue May 03 15:07:46 EDT 2022" starttimestamp="1651603184346" timestamp="1682228" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="147" _type="PauseCommand" date="Tue May 03 15:09:19 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="1775312">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[93084]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="146" _type="ShellCommand" date="Tue May 03 15:09:19 EDT 2022" starttimestamp="1651603184346" timestamp="1775312" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="149" _type="PauseCommand" date="Tue May 03 15:09:21 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="1777476">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2164]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="148" _type="ShellCommand" date="Tue May 03 15:09:21 EDT 2022" starttimestamp="1651603184346" timestamp="1777476" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="151" _type="PauseCommand" date="Tue May 03 15:09:38 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="1793863">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16387]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="150" _type="ShellCommand" date="Tue May 03 15:09:38 EDT 2022" starttimestamp="1651603184346" timestamp="1793863" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="152" _type="ShellCommand" date="Tue May 03 15:09:38 EDT 2022" starttimestamp="1651603184346" timestamp="1794382" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="154" _type="PauseCommand" date="Tue May 03 15:13:23 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="2019461">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[225079]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="153" _type="ShellCommand" date="Tue May 03 15:13:23 EDT 2022" starttimestamp="1651603184346" timestamp="2019461" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="156" _type="PauseCommand" date="Tue May 03 15:13:29 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="2025185">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5724]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="155" _type="ShellCommand" date="Tue May 03 15:13:29 EDT 2022" starttimestamp="1651603184346" timestamp="2025185" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="158" _type="PauseCommand" date="Tue May 03 15:13:35 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="2030698">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5513]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="157" _type="ShellCommand" date="Tue May 03 15:13:35 EDT 2022" starttimestamp="1651603184346" timestamp="2030698" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="160" _type="PauseCommand" date="Tue May 03 15:13:41 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="2036773">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6075]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="159" _type="ShellCommand" date="Tue May 03 15:13:41 EDT 2022" starttimestamp="1651603184346" timestamp="2036773" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="162" _type="PauseCommand" date="Tue May 03 15:13:43 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="2038696">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1923]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="161" _type="EclipseCommand" commandID="org.eclipse.ui.ide.showInSystemExplorer" date="Tue May 03 15:13:43 EDT 2022" starttimestamp="1651603184346" timestamp="2038696" />
  <Command __id="164" _type="PauseCommand" date="Tue May 03 15:13:47 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="2043036">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4340]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="172" _type="UndoCommand" date="Tue May 03 15:13:54 EDT 2022" starttimestamp="1651603184346" timestamp="2050071" />
  <Command __id="174" _type="PauseCommand" date="Tue May 03 15:13:59 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="2054687">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[4616]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="173" _type="ShellCommand" date="Tue May 03 15:13:59 EDT 2022" starttimestamp="1651603184346" timestamp="2054687" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="176" _type="PauseCommand" date="Tue May 03 15:14:03 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="2059461">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4774]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="175" _type="CopyCommand" date="Tue May 03 15:14:03 EDT 2022" starttimestamp="1651603184346" timestamp="2059461" />
  <Command __id="178" _type="PauseCommand" date="Tue May 03 15:14:07 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="2062991">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3530]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="177" _type="CopyCommand" date="Tue May 03 15:14:07 EDT 2022" starttimestamp="1651603184346" timestamp="2062991" />
  <Command __id="180" _type="PauseCommand" date="Tue May 03 15:14:08 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="2064052">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1061]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="179" _type="ShellCommand" date="Tue May 03 15:14:08 EDT 2022" starttimestamp="1651603184346" timestamp="2064052" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="181" _type="EclipseCommand" commandID="org.eclipse.ui.file.properties" date="Tue May 03 15:14:08 EDT 2022" starttimestamp="1651603184346" timestamp="2064085" />
  <Command __id="183" _type="PauseCommand" date="Tue May 03 15:14:10 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="2065846">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1761]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="182" _type="ShellCommand" date="Tue May 03 15:14:10 EDT 2022" starttimestamp="1651603184346" timestamp="2065846" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="185" _type="PauseCommand" date="Tue May 03 15:14:12 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="2068176">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2330]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="241" _type="EclipseCommand" commandID="" date="Tue May 03 15:19:47 EDT 2022" starttimestamp="1651603184346" timestamp="2403154" />
  <Command __id="243" _type="EclipseCommand" commandID="" date="Tue May 03 15:19:47 EDT 2022" starttimestamp="1651603184346" timestamp="2403206" />
  <Command __id="245" _type="PauseCommand" date="Tue May 03 15:19:55 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="2411142">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7936]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="244" _type="ShellCommand" date="Tue May 03 15:19:55 EDT 2022" starttimestamp="1651603184346" timestamp="2411142" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="170" _type="Replace" date="Tue May 03 15:13:54 EDT 2022" docASTNodeCount="43" docActiveCodeLength="538" docExpressionCount="23" docLength="622" endLine="5" insertionLength="223" int_docASTNodeCount="43" int_docActiveCodeLength="315" int_docExpressionCount="23" int_docLength="399" length="55" offset="156" startLine="5" starttimestamp="1651603184346" timestamp="2050036">
    <deletedText><![CDATA[http://andriusvelykis.github.io/ml-dev/updates/nightly/]]></deletedText>
    <insertedText><![CDATA[C:\\Users\\User\\OneDrive - University of North Carolina at Chapel Hill\\Desktop\\OneDrive - University of North Carolina at Chapel Hill\\Education\\College\\FA21\\COMP524- Programming Language Concepts\\Assignments\\A4 SML]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="190" _type="Replace" date="Tue May 03 15:14:17 EDT 2022" docASTNodeCount="43" docActiveCodeLength="359" docExpressionCount="23" docLength="443" endLine="5" insertionLength="44" int_docASTNodeCount="43" int_docActiveCodeLength="315" int_docExpressionCount="23" int_docLength="399" length="223" offset="156" startLine="5" starttimestamp="1651603184346" timestamp="2073409">
    <deletedText><![CDATA[C:\\Users\\User\\OneDrive - University of North Carolina at Chapel Hill\\Desktop\\OneDrive - University of North Carolina at Chapel Hill\\Education\\College\\FA21\\COMP524- Programming Language Concepts\\Assignments\\A4 SML]]></deletedText>
    <insertedText><![CDATA[C:\\Users\\User\\eclipse-workspace\\SML\\src]]></insertedText>
  </DocumentChange>
  <Command __id="247" _type="PauseCommand" date="Tue May 03 15:20:04 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="2420642">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9500]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="248" _type="ShellCommand" date="Tue May 03 15:20:05 EDT 2022" starttimestamp="1651603184346" timestamp="2420693" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="250" _type="PauseCommand" date="Tue May 03 15:20:07 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="2422763">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2070]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="253" _type="ShellCommand" date="Tue May 03 15:20:12 EDT 2022" starttimestamp="1651603184346" timestamp="2428506" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="256" _type="PauseCommand" date="Tue May 03 15:20:28 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="2444391">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15885]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="255" _type="ShellCommand" date="Tue May 03 15:20:28 EDT 2022" starttimestamp="1651603184346" timestamp="2444391" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="246" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:20:04 EDT 2022" projectName="SML" starttimestamp="1651603184346" timestamp="2420642">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistancing]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="257" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:20:28 EDT 2022" docLength="0" projectName="SML" starttimestamp="1651603184346" timestamp="2444458">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistancing.sml]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[]]></snapshot>
  </Command>
  <Command __id="259" _type="PauseCommand" date="Tue May 03 15:20:31 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="2447638">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[3180]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="258" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:20:31 EDT 2022" docLength="135" projectName="SML" starttimestamp="1651603184346" timestamp="2447638">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\example.sml]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[structure Sum = struct
	val sum = fold1 (op +) 0
	fun println s = print (s ^ "\n")
	val printSum = println o Int.toString o sum
end]]></snapshot>
  </Command>
  <Command __id="260" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:20:32 EDT 2022" docLength="278" projectName="SML" starttimestamp="1651603184346" timestamp="2448402">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistancing.sml]]></filePath>
    <diff><![CDATA[[Diff(INSERT,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;]]></snapshot>
  </Command>
  <Command __id="262" _type="PauseCommand" date="Tue May 03 15:20:34 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="2449748">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[1346]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="261" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:20:34 EDT 2022" docLength="135" projectName="SML" starttimestamp="1651603184346" timestamp="2449748">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\example.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"structure Sum = struct¶	val sum = fold1 (op +) 0¶	fun println s = print (s ^ "\n")¶	val printSum = println o Int.toString o sum¶end")]]]></diff>
  </Command>
  <Command __id="264" _type="PauseCommand" date="Tue May 03 15:20:37 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="2453482">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[3733]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="263" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:20:37 EDT 2022" docLength="278" projectName="SML" starttimestamp="1651603184346" timestamp="2453481">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistancing.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;")]]]></diff>
  </Command>
  <Command __id="266" _type="PauseCommand" date="Tue May 03 15:20:45 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="2460664">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[7183]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="265" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:20:45 EDT 2022" docLength="135" projectName="SML" starttimestamp="1651603184346" timestamp="2460664">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\example.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"structure Sum = struct¶	val sum = fold1 (op +) 0¶	fun println s = print (s ^ "\n")¶	val printSum = println o Int.toString o sum¶end")]]]></diff>
  </Command>
  <Command __id="268" _type="PauseCommand" date="Tue May 03 15:20:46 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="2462172">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[1508]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="267" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:20:46 EDT 2022" docLength="278" projectName="SML" starttimestamp="1651603184346" timestamp="2462172">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistancing.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;")]]]></diff>
  </Command>
  <Command __id="270" _type="PauseCommand" date="Tue May 03 15:20:48 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="2463772">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[1600]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="273" _type="PauseCommand" date="Tue May 03 15:20:56 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="2472455">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[7724]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="272" _type="ShellCommand" date="Tue May 03 15:20:56 EDT 2022" starttimestamp="1651603184346" timestamp="2472455" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="275" _type="PauseCommand" date="Tue May 03 15:21:09 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="2485089">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12634]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="306" _type="ShellCommand" date="Tue May 03 15:22:14 EDT 2022" starttimestamp="1651603184346" timestamp="2549682" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="309" _type="PauseCommand" date="Tue May 03 15:22:15 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="2551376">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1694]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="383" _type="ShellCommand" date="Tue May 03 15:24:30 EDT 2022" starttimestamp="1651603184346" timestamp="2685664" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="386" _type="PauseCommand" date="Tue May 03 15:24:32 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="2687986">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2322]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="385" _type="ShellCommand" date="Tue May 03 15:24:32 EDT 2022" starttimestamp="1651603184346" timestamp="2687986" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="389" _type="PauseCommand" date="Tue May 03 15:24:36 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="2692224">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[4165]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="388" _type="ShellCommand" date="Tue May 03 15:24:36 EDT 2022" starttimestamp="1651603184346" timestamp="2692224" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="390" _type="ShellCommand" date="Tue May 03 15:24:37 EDT 2022" starttimestamp="1651603184346" timestamp="2693048" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="391" _type="ShellCommand" date="Tue May 03 15:24:38 EDT 2022" starttimestamp="1651603184346" timestamp="2693816" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="393" _type="PauseCommand" date="Tue May 03 15:25:11 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="2727228">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[33411]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="392" _type="ShellCommand" date="Tue May 03 15:25:11 EDT 2022" starttimestamp="1651603184346" timestamp="2727227" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="395" _type="PauseCommand" date="Tue May 03 15:25:36 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="2752466">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[25239]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="394" _type="ShellCommand" date="Tue May 03 15:25:36 EDT 2022" starttimestamp="1651603184346" timestamp="2752466" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="397" _type="PauseCommand" date="Tue May 03 15:25:44 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="2760064">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7598]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="396" _type="ShellCommand" date="Tue May 03 15:25:44 EDT 2022" starttimestamp="1651603184346" timestamp="2760064" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="399" _type="PauseCommand" date="Tue May 03 15:25:58 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="2773755">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13691]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="398" _type="ShellCommand" date="Tue May 03 15:25:58 EDT 2022" starttimestamp="1651603184346" timestamp="2773755" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="401" _type="PauseCommand" date="Tue May 03 15:26:24 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="2800318">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26563]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="400" _type="ShellCommand" date="Tue May 03 15:26:24 EDT 2022" starttimestamp="1651603184346" timestamp="2800318" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="403" _type="PauseCommand" date="Tue May 03 15:26:36 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="2811901">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11583]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="402" _type="ShellCommand" date="Tue May 03 15:26:36 EDT 2022" starttimestamp="1651603184346" timestamp="2811901" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="405" _type="PauseCommand" date="Tue May 03 15:26:45 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="2821432">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9531]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="404" _type="ShellCommand" date="Tue May 03 15:26:45 EDT 2022" starttimestamp="1651603184346" timestamp="2821432" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="408" _type="PauseCommand" date="Tue May 03 15:27:05 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="2840921">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[19426]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="428" _type="ShellCommand" date="Tue May 03 15:29:52 EDT 2022" starttimestamp="1651603184346" timestamp="3008251" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="430" _type="ShellCommand" date="Tue May 03 15:29:53 EDT 2022" starttimestamp="1651603184346" timestamp="3009065" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="432" _type="PauseCommand" date="Tue May 03 15:31:27 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="3103124">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[94059]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="458" _type="ShellCommand" date="Tue May 03 15:32:56 EDT 2022" starttimestamp="1651603184346" timestamp="3191750" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="460" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 15:32:56 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="3192400" type="Run" />
  <Command __id="461" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 15:32:56 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="3192400" type="Run" />
  <Command __id="269" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:20:48 EDT 2022" docLength="135" projectName="SML" starttimestamp="1651603184346" timestamp="2463772">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\example.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"structure Sum = struct¶	val sum = fold1 (op +) 0¶	fun println s = print (s ^ "\n")¶	val printSum = println o Int.toString o sum¶end")]]]></diff>
  </Command>
  <Command __id="271" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:20:49 EDT 2022" docLength="278" projectName="SML" starttimestamp="1651603184346" timestamp="2464731">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistancing.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;")]]]></diff>
  </Command>
  <Command __id="387" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:24:32 EDT 2022" docLength="4519" projectName="SML" starttimestamp="1651603184346" timestamp="2688059">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun distInterpolation Distance =
	if Distance < 6 then 0
	else
	if (Distance < 13 andalso Distance >= 6) then 6
	else
	if (Distance < 27 andalso Distance >= 13) then 13
	else
	27;
	
fun durInterpolation Duration =
	if Duration > 120 then 200
	else
	if (Duration > 30 andalso Duration <= 120) then 120
	else
	if (Duration > 15 andalso Duration <= 30) then 30
	else
	15;

fun exhInterpolation Exhalation = 
	if Exhalation > 50 then 200
	else
	if (Exhalation > 30 andalso Exhalation <= 50) then 50
	else
	if (Exhalation > 10 andalso Exhalation <= 30) then 30
	else
	10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val intDist = distInterpolation(Distance)
		val intDur = durInterpolation(Duration)
		val intExh = exhInterpolation(Exhalation)
	in
		givenSafe(intDist, intDur, intExh)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list;

fun
	derivedSafeRec (Distance, Duration, Exhalation, nil) = false | 
	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = 
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		derivedSafeRec (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, listHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, listTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="406" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:26:45 EDT 2022" docLength="4519" projectName="SML" starttimestamp="1651603184346" timestamp="2821495">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun distInterpolation Distance =¶	if Distance < 6 then 0¶	else¶	if (Distance < 13 andalso Distance >= 6) then 6¶	else¶	if (Distance < 27 andalso Distance >= 13) then 13¶	else¶	27;¶	¶fun durInterpolation Duration =¶	if Duration > 120 then 200¶	else¶	if (Duration > 30 andalso Duration <= 120) then 120¶	else¶	if (Duration > 15 andalso Duration <= 30) then 30¶	else¶	15;¶¶fun exhInterpolation Exhalation = ¶	if Exhalation > 50 then 200¶	else¶	if (Exhalation > 30 andalso Exhalation <= 50) then 50¶	else¶	if (Exhalation > 10 andalso Exhalation <= 30) then 30¶	else¶	10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val intDist = distInterpolation(Distance)¶		val intDur = durInterpolation(Duration)¶		val intExh = exhInterpolation(Exhalation)¶	in¶		givenSafe(intDist, intDur, intExh)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)] : (int * int * int) list;¶¶fun¶	derivedSafeRec (Distance, Duration, Exhalation, nil) = false | ¶	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = ¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		derivedSafeRec (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, listHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, listTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
  </Command>
  <Command __id="433" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:31:27 EDT 2022" docLength="4519" projectName="SML" starttimestamp="1651603184346" timestamp="3103192">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun distInterpolation Distance =¶	if Distance < 6 then 0¶	else¶	if (Distance < 13 andalso Distance >= 6) then 6¶	else¶	if (Distance < 27 andalso Distance >= 13) then 13¶	else¶	27;¶	¶fun durInterpolation Duration =¶	if Duration > 120 then 200¶	else¶	if (Duration > 30 andalso Duration <= 120) then 120¶	else¶	if (Duration > 15 andalso Duration <= 30) then 30¶	else¶	15;¶¶fun exhInterpolation Exhalation = ¶	if Exhalation > 50 then 200¶	else¶	if (Exhalation > 30 andalso Exhalation <= 50) then 50¶	else¶	if (Exhalation > 10 andalso Exhalation <= 30) then 30¶	else¶	10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val intDist = distInterpolation(Distance)¶		val intDur = durInterpolation(Duration)¶		val intExh = exhInterpolation(Exhalation)¶	in¶		givenSafe(intDist, intDur, intExh)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)] : (int * int * int) list;¶¶fun¶	derivedSafeRec (Distance, Duration, Exhalation, nil) = false | ¶	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = ¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		derivedSafeRec (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, listHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, listTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
  </Command>
  <Command __id="463" _type="PauseCommand" date="Tue May 03 15:32:58 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="3193677">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1277]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="465" _type="PauseCommand" date="Tue May 03 15:33:00 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="3196620">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[2943]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="464" _type="ShellCommand" date="Tue May 03 15:33:00 EDT 2022" starttimestamp="1651603184346" timestamp="3196620" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="467" _type="PauseCommand" date="Tue May 03 15:34:19 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="3275606">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[78986]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="466" _type="ShellCommand" date="Tue May 03 15:34:19 EDT 2022" starttimestamp="1651603184346" timestamp="3275606" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="469" _type="PauseCommand" date="Tue May 03 15:34:20 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="3276630">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1024]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="468" _type="ShellCommand" date="Tue May 03 15:34:20 EDT 2022" starttimestamp="1651603184346" timestamp="3276630" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="471" _type="PauseCommand" date="Tue May 03 15:34:24 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="3279989">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3359]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="470" _type="ShellCommand" date="Tue May 03 15:34:24 EDT 2022" starttimestamp="1651603184346" timestamp="3279989" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="473" _type="PauseCommand" date="Tue May 03 15:37:58 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="3493889">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[213899]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="472" _type="ShellCommand" date="Tue May 03 15:37:58 EDT 2022" starttimestamp="1651603184346" timestamp="3493888" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="475" _type="PauseCommand" date="Tue May 03 15:38:34 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="3529721">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[35833]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="505" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 15:40:19 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="3635474" type="Run" />
  <Command __id="507" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 15:40:19 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="3635474" type="Run" />
  <Command __id="508" _type="ShellCommand" date="Tue May 03 15:40:20 EDT 2022" starttimestamp="1651603184346" timestamp="3636362" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="511" _type="PauseCommand" date="Tue May 03 15:41:18 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="3694489">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[58060]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="510" _type="ShellCommand" date="Tue May 03 15:41:18 EDT 2022" starttimestamp="1651603184346" timestamp="3694489" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="513" _type="PauseCommand" date="Tue May 03 15:41:30 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="3706501">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12012]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="542" _type="ExceptionCommand" date="Tue May 03 15:42:53 EDT 2022" starttimestamp="1651603184346" timestamp="3788872" type="Exception">
    <exceptionString><![CDATA[java.nio.file.NoSuchFileException: C:\Users\User\eclipse-workspace\SML\src\Logs\LocalChecks\comp524f21_assignment4_F21Assignment4SuiteFineGrained.csv
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:478)
	at java.base/java.nio.file.Files.newOutputStream(Files.java:220)
	at java.base/java.nio.file.Files.newBufferedWriter(Files.java:2920)
	at grader.basics.observers.AnAbstractTestLogFileWriter.maybeCreateOrLoadSecondAppendableFile(AnAbstractTestLogFileWriter.java:314)
	at grader.basics.observers.AnAbstractTestLogFileWriter.maybeCreateOrLoadAppendableFile(AnAbstractTestLogFileWriter.java:296)
	at grader.basics.observers.AFineGrainedTestLogFileWriter.testRunStarted(AFineGrainedTestLogFileWriter.java:111)
	at org.junit.runner.notification.SynchronizedRunListener.testRunStarted(SynchronizedRunListener.java:35)
	at org.junit.runner.notification.RunNotifier$1.notifyListener(RunNotifier.java:91)
	at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:72)
	at org.junit.runner.notification.RunNotifier.fireTestRunStarted(RunNotifier.java:88)
	at grader.basics.junit.AGradableJUnitTopLevelSuite.testRunStarted(AGradableJUnitTopLevelSuite.java:107)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="544" _type="ConsoleOutput" date="Tue May 03 15:42:53 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="3788980" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Found a source file:C:\Users\User\eclipse-workspace\SML\src\Greeting.sml¶Assuming src folder is:C:\Users\User\eclipse-workspace\SML\src"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="545" _type="ShellCommand" date="Tue May 03 15:42:53 EDT 2022" starttimestamp="1651603184346" timestamp="3789575" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="548" _type="PauseCommand" date="Tue May 03 15:42:55 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="3790993">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[1352]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="547" _type="ShellCommand" date="Tue May 03 15:42:55 EDT 2022" starttimestamp="1651603184346" timestamp="3790993" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="550" _type="PauseCommand" date="Tue May 03 15:42:56 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="3792392">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1399]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="549" _type="ConsoleOutput" date="Tue May 03 15:42:56 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="3792392" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):1"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="552" _type="PauseCommand" date="Tue May 03 15:43:02 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="3798124">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5732]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="551" _type="ConsoleOutput" date="Tue May 03 15:43:02 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="3798124" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):9115
Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):9115¶"), Diff(EQUAL,"Number of traces > 600  turning tracing off¶")]]]></diff>
  </Command>
  <Command __id="554" _type="PauseCommand" date="Tue May 03 15:43:05 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="3801542">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3418]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="553" _type="ConsoleOutput" date="Tue May 03 15:43:05 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="3801542" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):9115¶"), Diff(EQUAL,"Number of traces > 600  turning tracing off¶")]]]></diff>
  </Command>
  <Command __id="556" _type="PauseCommand" date="Tue May 03 15:43:11 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="3807162">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5620]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="555" _type="ConsoleOutput" date="Tue May 03 15:43:11 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="3807162" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):9081
Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):9081¶"), Diff(EQUAL,"Number of traces > 600  turning tracing off¶")]]]></diff>
  </Command>
  <Command __id="558" _type="PauseCommand" date="Tue May 03 15:43:12 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="3808398">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1236]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="557" _type="ConsoleOutput" date="Tue May 03 15:43:12 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="3808398" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1230
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"9081¶Number of traces > 600  turning tracing off"), Diff(INSERT,"1230"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="560" _type="PauseCommand" date="Tue May 03 15:43:15 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="3811170">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2772]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="559" _type="ConsoleOutput" date="Tue May 03 15:43:15 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="3811170" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2766
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"1230"), Diff(INSERT,"2766"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="562" _type="PauseCommand" date="Tue May 03 15:43:18 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="3813862">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2692]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="561" _type="ConsoleOutput" date="Tue May 03 15:43:18 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="3813862" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2686
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):2"), Diff(DELETE,"7"), Diff(EQUAL,"6"), Diff(INSERT,"8"), Diff(EQUAL,"6¶")]]]></diff>
  </Command>
  <Command __id="564" _type="PauseCommand" date="Tue May 03 15:43:20 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="3816641">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2779]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="563" _type="ConsoleOutput" date="Tue May 03 15:43:20 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="3816641" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2717
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):2"), Diff(DELETE,"686"), Diff(INSERT,"717"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="566" _type="PauseCommand" date="Tue May 03 15:44:44 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="3900186">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[83545]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="565" _type="ShellCommand" date="Tue May 03 15:44:44 EDT 2022" starttimestamp="1651603184346" timestamp="3900186" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="568" _type="PauseCommand" date="Tue May 03 15:45:01 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="3916806">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16620]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="567" _type="ShellCommand" date="Tue May 03 15:45:01 EDT 2022" starttimestamp="1651603184346" timestamp="3916806" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="570" _type="PauseCommand" date="Tue May 03 15:45:05 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="3920827">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4021]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="569" _type="ShellCommand" date="Tue May 03 15:45:05 EDT 2022" starttimestamp="1651603184346" timestamp="3920827" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="572" _type="PauseCommand" date="Tue May 03 15:45:17 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="3933155">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12328]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="602" _type="ConsoleOutput" date="Tue May 03 15:45:58 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="3974371" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2725
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):272"), Diff(DELETE,"3"), Diff(INSERT,"5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="605" _type="PauseCommand" date="Tue May 03 15:46:10 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="3986228">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11857]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="604" _type="ShellCommand" date="Tue May 03 15:46:10 EDT 2022" starttimestamp="1651603184346" timestamp="3986228" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="608" _type="PauseCommand" date="Tue May 03 15:47:04 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="4040486">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[54183]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="607" _type="ShellCommand" date="Tue May 03 15:47:04 EDT 2022" starttimestamp="1651603184346" timestamp="4040486" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="610" _type="PauseCommand" date="Tue May 03 15:47:06 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="4042427">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1941]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="609" _type="ShellCommand" date="Tue May 03 15:47:06 EDT 2022" starttimestamp="1651603184346" timestamp="4042427" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="611" _type="ShellCommand" date="Tue May 03 15:47:07 EDT 2022" starttimestamp="1651603184346" timestamp="4042942" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="613" _type="PauseCommand" date="Tue May 03 15:47:08 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="4043974">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1032]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="612" _type="ShellCommand" date="Tue May 03 15:47:08 EDT 2022" starttimestamp="1651603184346" timestamp="4043974" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="615" _type="PauseCommand" date="Tue May 03 15:47:22 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="4058230">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14256]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="614" _type="ShellCommand" date="Tue May 03 15:47:22 EDT 2022" starttimestamp="1651603184346" timestamp="4058230" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="617" _type="PauseCommand" date="Tue May 03 15:47:56 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="4092455">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[34225]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="616" _type="ShellCommand" date="Tue May 03 15:47:56 EDT 2022" starttimestamp="1651603184346" timestamp="4092455" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="619" _type="PauseCommand" date="Tue May 03 15:48:26 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="4121825">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[29370]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="618" _type="ShellCommand" date="Tue May 03 15:48:26 EDT 2022" starttimestamp="1651603184346" timestamp="4121825" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="621" _type="PauseCommand" date="Tue May 03 15:48:38 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="4134343">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12518]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="620" _type="ShellCommand" date="Tue May 03 15:48:38 EDT 2022" starttimestamp="1651603184346" timestamp="4134343" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="622" _type="ShellCommand" date="Tue May 03 15:48:39 EDT 2022" starttimestamp="1651603184346" timestamp="4134743" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="624" _type="PauseCommand" date="Tue May 03 15:55:44 EDT 2022" range="5m-10m" starttimestamp="1651603184346" timestamp="4560156">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[425413]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="623" _type="ShellCommand" date="Tue May 03 15:55:44 EDT 2022" starttimestamp="1651603184346" timestamp="4560156" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="626" _type="PauseCommand" date="Tue May 03 15:55:59 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="4575057">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14901]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="625" _type="ShellCommand" date="Tue May 03 15:55:59 EDT 2022" starttimestamp="1651603184346" timestamp="4575057" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="628" _type="PauseCommand" date="Tue May 03 16:00:52 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="4868585">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[293528]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="627" _type="ShellCommand" date="Tue May 03 16:00:52 EDT 2022" starttimestamp="1651603184346" timestamp="4868585" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="629" _type="ShellCommand" date="Tue May 03 16:00:53 EDT 2022" starttimestamp="1651603184346" timestamp="4869378" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="631" _type="PauseCommand" date="Tue May 03 16:01:05 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="4880960">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11582]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="630" _type="ShellCommand" date="Tue May 03 16:01:05 EDT 2022" starttimestamp="1651603184346" timestamp="4880960" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="633" _type="PauseCommand" date="Tue May 03 16:01:07 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="4883086">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2125]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="632" _type="ShellCommand" date="Tue May 03 16:01:07 EDT 2022" starttimestamp="1651603184346" timestamp="4883085" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="635" _type="PauseCommand" date="Tue May 03 16:01:26 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="4902650">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[19565]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="634" _type="ShellCommand" date="Tue May 03 16:01:26 EDT 2022" starttimestamp="1651603184346" timestamp="4902650" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="637" _type="PauseCommand" date="Tue May 03 16:02:02 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="4938392">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[35742]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="636" _type="ShellCommand" date="Tue May 03 16:02:02 EDT 2022" starttimestamp="1651603184346" timestamp="4938392" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="639" _type="PauseCommand" date="Tue May 03 16:03:39 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="5035493">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[97101]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="638" _type="ShellCommand" date="Tue May 03 16:03:39 EDT 2022" starttimestamp="1651603184346" timestamp="5035493" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="640" _type="ShellCommand" date="Tue May 03 16:03:40 EDT 2022" starttimestamp="1651603184346" timestamp="5036127" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="642" _type="PauseCommand" date="Tue May 03 16:35:53 EDT 2022" range="30m-1h" starttimestamp="1651603184346" timestamp="6969218">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1933091]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="641" _type="ShellCommand" date="Tue May 03 16:35:53 EDT 2022" starttimestamp="1651603184346" timestamp="6969218" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="643" _type="ShellCommand" date="Tue May 03 16:35:54 EDT 2022" starttimestamp="1651603184346" timestamp="6969994" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="645" _type="PauseCommand" date="Tue May 03 16:37:45 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="7081097">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[111103]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="644" _type="ShellCommand" date="Tue May 03 16:37:45 EDT 2022" starttimestamp="1651603184346" timestamp="7081097" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="647" _type="PauseCommand" date="Tue May 03 16:37:47 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="7083317">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2220]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="648" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 16:37:51 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="7087505" type="Run" />
  <Command __id="650" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 16:37:51 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="7087505" type="Run" />
  <Command __id="652" _type="PauseCommand" date="Tue May 03 16:37:55 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="7091333">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3828]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="651" _type="ShellCommand" date="Tue May 03 16:37:55 EDT 2022" starttimestamp="1651603184346" timestamp="7091333" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="654" _type="PauseCommand" date="Tue May 03 16:38:22 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="7118558">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[27225]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="653" _type="ShellCommand" date="Tue May 03 16:38:22 EDT 2022" starttimestamp="1651603184346" timestamp="7118558" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="656" _type="PauseCommand" date="Tue May 03 16:38:31 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="7126858">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8300]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="655" _type="ShellCommand" date="Tue May 03 16:38:31 EDT 2022" starttimestamp="1651603184346" timestamp="7126858" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="658" _type="PauseCommand" date="Tue May 03 16:39:44 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="7200111">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[73253]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="686" _type="ConsoleOutput" date="Tue May 03 16:40:37 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="7252901" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp524f20.assignment3.functionParamaters.PrintSafety@90449f8 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):2723"), Diff(INSERT,"Re-running test gradingTools.comp524f20.assignment3.functionParamaters.PrintSafety@90449f8 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="689" _type="PauseCommand" date="Tue May 03 16:40:41 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="7256803">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3902]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="688" _type="ShellCommand" date="Tue May 03 16:40:41 EDT 2022" starttimestamp="1651603184346" timestamp="7256803" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="692" _type="PauseCommand" date="Tue May 03 16:40:49 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="7265318">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[8450]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="691" _type="ShellCommand" date="Tue May 03 16:40:49 EDT 2022" starttimestamp="1651603184346" timestamp="7265318" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="694" _type="PauseCommand" date="Tue May 03 16:42:22 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="7358191">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[92873]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="702" _type="ExceptionCommand" date="Tue May 03 16:44:38 EDT 2022" starttimestamp="1651603184346" timestamp="7494233" type="Exception">
    <exceptionString><![CDATA[java.nio.file.NoSuchFileException: C:\Users\User\eclipse-workspace\SML\src\Logs\LocalChecks\comp524f21_assignment4_F21Assignment4SuiteFineGrained.csv
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:478)
	at java.base/java.nio.file.Files.newOutputStream(Files.java:220)
	at java.base/java.nio.file.Files.newBufferedWriter(Files.java:2920)
	at grader.basics.observers.AnAbstractTestLogFileWriter.maybeCreateOrLoadSecondAppendableFile(AnAbstractTestLogFileWriter.java:314)
	at grader.basics.observers.AnAbstractTestLogFileWriter.maybeCreateOrLoadAppendableFile(AnAbstractTestLogFileWriter.java:296)
	at grader.basics.observers.AFineGrainedTestLogFileWriter.testRunStarted(AFineGrainedTestLogFileWriter.java:111)
	at org.junit.runner.notification.SynchronizedRunListener.testRunStarted(SynchronizedRunListener.java:35)
	at org.junit.runner.notification.RunNotifier$1.notifyListener(RunNotifier.java:91)
	at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:72)
	at org.junit.runner.notification.RunNotifier.fireTestRunStarted(RunNotifier.java:88)
	at grader.basics.junit.AGradableJUnitTopLevelSuite.testRunStarted(AGradableJUnitTopLevelSuite.java:107)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="704" _type="ExceptionCommand" date="Tue May 03 16:44:39 EDT 2022" starttimestamp="1651603184346" timestamp="7494863" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.PrintSafety.test(PrintSafety.java:39)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="705" _type="ExceptionCommand" date="Tue May 03 16:44:39 EDT 2022" starttimestamp="1651603184346" timestamp="7495361" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.ConcisePrintSafety.test(ConcisePrintSafety.java:33)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="706" _type="ExceptionCommand" date="Tue May 03 16:44:40 EDT 2022" starttimestamp="1651603184346" timestamp="7495944" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.ListPrintSafety.test(ListPrintSafety.java:45)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="707" _type="ExceptionCommand" date="Tue May 03 16:44:40 EDT 2022" starttimestamp="1651603184346" timestamp="7496477" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.MatchingSafe.test(MatchingSafe.java:42)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="708" _type="ExceptionCommand" date="Tue May 03 16:44:41 EDT 2022" starttimestamp="1651603184346" timestamp="7497028" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.MatchingGivenSafe.test(MatchingGivenSafe.java:33)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="709" _type="ExceptionCommand" date="Tue May 03 16:44:41 EDT 2022" starttimestamp="1651603184346" timestamp="7497515" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.MatchingDerivedSafe.test(MatchingDerivedSafe.java:34)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="711" _type="PauseCommand" date="Tue May 03 16:44:49 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="7505137">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[7622]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="710" _type="ShellCommand" date="Tue May 03 16:44:49 EDT 2022" starttimestamp="1651603184346" timestamp="7505137" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="714" _type="PauseCommand" date="Tue May 03 16:45:05 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="7521167">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[15958]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="713" _type="ShellCommand" date="Tue May 03 16:45:05 EDT 2022" starttimestamp="1651603184346" timestamp="7521167" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="716" _type="PauseCommand" date="Tue May 03 16:45:11 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="7527070">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5903]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="742" _type="ConsoleOutput" date="Tue May 03 16:45:46 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="7562529" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2713
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):27"), Diff(DELETE,"00"), Diff(INSERT,"13"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="745" _type="PauseCommand" date="Tue May 03 16:45:59 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="7574669">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[12140]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="744" _type="ShellCommand" date="Tue May 03 16:45:59 EDT 2022" starttimestamp="1651603184346" timestamp="7574669" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="748" _type="PauseCommand" date="Tue May 03 16:46:04 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="7580579">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[5838]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="747" _type="ShellCommand" date="Tue May 03 16:46:04 EDT 2022" starttimestamp="1651603184346" timestamp="7580579" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="750" _type="PauseCommand" date="Tue May 03 16:46:27 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="7603140">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22561]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="749" _type="ShellCommand" date="Tue May 03 16:46:27 EDT 2022" starttimestamp="1651603184346" timestamp="7603140" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="751" _type="ShellCommand" date="Tue May 03 16:46:28 EDT 2022" starttimestamp="1651603184346" timestamp="7604038" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="753" _type="PauseCommand" date="Tue May 03 16:47:03 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="7639444">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[35406]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="752" _type="ShellCommand" date="Tue May 03 16:47:03 EDT 2022" starttimestamp="1651603184346" timestamp="7639444" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="755" _type="PauseCommand" date="Tue May 03 16:47:05 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="7640926">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1482]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="754" _type="ShellCommand" date="Tue May 03 16:47:05 EDT 2022" starttimestamp="1651603184346" timestamp="7640926" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="757" _type="PauseCommand" date="Tue May 03 16:47:21 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="7656926">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16000]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="756" _type="ShellCommand" date="Tue May 03 16:47:21 EDT 2022" starttimestamp="1651603184346" timestamp="7656926" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="759" _type="PauseCommand" date="Tue May 03 16:47:22 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="7658507">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1581]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="758" _type="ShellCommand" date="Tue May 03 16:47:22 EDT 2022" starttimestamp="1651603184346" timestamp="7658507" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="761" _type="PauseCommand" date="Tue May 03 16:47:29 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="7664822">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6315]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="760" _type="ShellCommand" date="Tue May 03 16:47:29 EDT 2022" starttimestamp="1651603184346" timestamp="7664822" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="763" _type="PauseCommand" date="Tue May 03 16:47:30 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="7666249">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1427]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="764" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 16:47:38 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="7674596" type="Run" />
  <Command __id="766" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 16:47:38 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="7674596" type="Run" />
  <Command __id="768" _type="PauseCommand" date="Tue May 03 16:48:05 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="7701165">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[26569]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="767" _type="ShellCommand" date="Tue May 03 16:48:05 EDT 2022" starttimestamp="1651603184346" timestamp="7701165" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="769" _type="ShellCommand" date="Tue May 03 16:48:06 EDT 2022" starttimestamp="1651603184346" timestamp="7702086" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="771" _type="PauseCommand" date="Tue May 03 16:56:11 EDT 2022" range="5m-10m" starttimestamp="1651603184346" timestamp="8187137">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[485051]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="770" _type="ShellCommand" date="Tue May 03 16:56:11 EDT 2022" starttimestamp="1651603184346" timestamp="8187137" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="773" _type="PauseCommand" date="Tue May 03 16:56:52 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="8228350">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[41213]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="772" _type="ShellCommand" date="Tue May 03 16:56:52 EDT 2022" starttimestamp="1651603184346" timestamp="8228350" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="775" _type="PauseCommand" date="Tue May 03 16:59:22 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="8377921">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[149571]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="774" _type="ShellCommand" date="Tue May 03 16:59:22 EDT 2022" starttimestamp="1651603184346" timestamp="8377921" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="776" _type="ShellCommand" date="Tue May 03 16:59:22 EDT 2022" starttimestamp="1651603184346" timestamp="8378454" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="778" _type="PauseCommand" date="Tue May 03 16:59:50 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="8406477">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[28023]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="777" _type="ShellCommand" date="Tue May 03 16:59:50 EDT 2022" starttimestamp="1651603184346" timestamp="8406477" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="780" _type="PauseCommand" date="Tue May 03 16:59:53 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="8409567">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3090]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="779" _type="ShellCommand" date="Tue May 03 16:59:53 EDT 2022" starttimestamp="1651603184346" timestamp="8409567" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="782" _type="PauseCommand" date="Tue May 03 16:59:57 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="8413077">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3510]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="781" _type="ShellCommand" date="Tue May 03 16:59:57 EDT 2022" starttimestamp="1651603184346" timestamp="8413077" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="784" _type="PauseCommand" date="Tue May 03 17:00:16 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="8431775">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18698]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="783" _type="ShellCommand" date="Tue May 03 17:00:16 EDT 2022" starttimestamp="1651603184346" timestamp="8431775" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="786" _type="PauseCommand" date="Tue May 03 17:01:31 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="8507409">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[75634]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="785" _type="ShellCommand" date="Tue May 03 17:01:31 EDT 2022" starttimestamp="1651603184346" timestamp="8507409" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="788" _type="PauseCommand" date="Tue May 03 17:01:34 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="8510486">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3077]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="787" _type="ShellCommand" date="Tue May 03 17:01:34 EDT 2022" starttimestamp="1651603184346" timestamp="8510486" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="790" _type="PauseCommand" date="Tue May 03 17:02:29 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="8564674">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[54188]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="789" _type="ShellCommand" date="Tue May 03 17:02:29 EDT 2022" starttimestamp="1651603184346" timestamp="8564674" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="791" _type="ShellCommand" date="Tue May 03 17:02:29 EDT 2022" starttimestamp="1651603184346" timestamp="8565054" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="793" _type="PauseCommand" date="Tue May 03 17:02:33 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="8569474">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4420]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="792" _type="ShellCommand" date="Tue May 03 17:02:33 EDT 2022" starttimestamp="1651603184346" timestamp="8569474" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="794" _type="ShellCommand" date="Tue May 03 17:02:34 EDT 2022" starttimestamp="1651603184346" timestamp="8570328" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="796" _type="PauseCommand" date="Tue May 03 17:02:50 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="8586398">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16070]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="795" _type="ShellCommand" date="Tue May 03 17:02:50 EDT 2022" starttimestamp="1651603184346" timestamp="8586398" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="798" _type="PauseCommand" date="Tue May 03 17:02:55 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="8591243">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4845]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="797" _type="ShellCommand" date="Tue May 03 17:02:55 EDT 2022" starttimestamp="1651603184346" timestamp="8591243" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="800" _type="PauseCommand" date="Tue May 03 17:04:00 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="8656583">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[65340]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="799" _type="ShellCommand" date="Tue May 03 17:04:00 EDT 2022" starttimestamp="1651603184346" timestamp="8656583" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="802" _type="PauseCommand" date="Tue May 03 17:04:04 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="8660314">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3731]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="801" _type="ShellCommand" date="Tue May 03 17:04:04 EDT 2022" starttimestamp="1651603184346" timestamp="8660314" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="804" _type="PauseCommand" date="Tue May 03 17:05:08 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="8724109">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[63795]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="803" _type="ShellCommand" date="Tue May 03 17:05:08 EDT 2022" starttimestamp="1651603184346" timestamp="8724109" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="806" _type="PauseCommand" date="Tue May 03 17:05:10 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="8725820">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1711]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="805" _type="ShellCommand" date="Tue May 03 17:05:10 EDT 2022" starttimestamp="1651603184346" timestamp="8725820" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="808" _type="PauseCommand" date="Tue May 03 17:06:33 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="8809446">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[83626]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="807" _type="ShellCommand" date="Tue May 03 17:06:33 EDT 2022" starttimestamp="1651603184346" timestamp="8809446" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="810" _type="PauseCommand" date="Tue May 03 17:06:40 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="8816166">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6720]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="809" _type="ShellCommand" date="Tue May 03 17:06:40 EDT 2022" starttimestamp="1651603184346" timestamp="8816166" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="812" _type="PauseCommand" date="Tue May 03 17:06:55 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="8831416">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15250]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="811" _type="ShellCommand" date="Tue May 03 17:06:55 EDT 2022" starttimestamp="1651603184346" timestamp="8831416" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="813" _type="ShellCommand" date="Tue May 03 17:06:56 EDT 2022" starttimestamp="1651603184346" timestamp="8832038" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="815" _type="PauseCommand" date="Tue May 03 17:10:01 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="9017225">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[185187]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="814" _type="ShellCommand" date="Tue May 03 17:10:01 EDT 2022" starttimestamp="1651603184346" timestamp="9017225" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="817" _type="PauseCommand" date="Tue May 03 17:10:43 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="9058956">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[41731]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="816" _type="ShellCommand" date="Tue May 03 17:10:43 EDT 2022" starttimestamp="1651603184346" timestamp="9058956" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="819" _type="PauseCommand" date="Tue May 03 17:21:46 EDT 2022" range="10m-20m" starttimestamp="1651603184346" timestamp="9722003">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[663047]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="818" _type="ShellCommand" date="Tue May 03 17:21:46 EDT 2022" starttimestamp="1651603184346" timestamp="9722003" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="821" _type="PauseCommand" date="Tue May 03 17:22:12 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="9747850">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[25847]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="820" _type="ShellCommand" date="Tue May 03 17:22:12 EDT 2022" starttimestamp="1651603184346" timestamp="9747850" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="823" _type="PauseCommand" date="Tue May 03 17:23:18 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="9814563">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[66713]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="822" _type="ShellCommand" date="Tue May 03 17:23:18 EDT 2022" starttimestamp="1651603184346" timestamp="9814563" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="825" _type="PauseCommand" date="Tue May 03 17:23:22 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="9817790">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3227]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="824" _type="ShellCommand" date="Tue May 03 17:23:22 EDT 2022" starttimestamp="1651603184346" timestamp="9817790" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="827" _type="PauseCommand" date="Tue May 03 17:24:54 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="9910628">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[92838]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="826" _type="ShellCommand" date="Tue May 03 17:24:54 EDT 2022" starttimestamp="1651603184346" timestamp="9910628" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="829" _type="PauseCommand" date="Tue May 03 17:25:23 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="9939543">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[28915]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="828" _type="ShellCommand" date="Tue May 03 17:25:23 EDT 2022" starttimestamp="1651603184346" timestamp="9939543" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="831" _type="PauseCommand" date="Tue May 03 17:27:26 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="10062022">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[122479]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="830" _type="ShellCommand" date="Tue May 03 17:27:26 EDT 2022" starttimestamp="1651603184346" timestamp="10062022" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="833" _type="PauseCommand" date="Tue May 03 17:27:35 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="10071031">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9009]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="832" _type="ShellCommand" date="Tue May 03 17:27:35 EDT 2022" starttimestamp="1651603184346" timestamp="10071031" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="835" _type="PauseCommand" date="Tue May 03 17:28:06 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="10101886">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[30855]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="834" _type="ShellCommand" date="Tue May 03 17:28:06 EDT 2022" starttimestamp="1651603184346" timestamp="10101886" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="836" _type="ShellCommand" date="Tue May 03 17:28:06 EDT 2022" starttimestamp="1651603184346" timestamp="10102591" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="838" _type="PauseCommand" date="Tue May 03 17:29:47 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="10203400">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[100809]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="837" _type="ShellCommand" date="Tue May 03 17:29:47 EDT 2022" starttimestamp="1651603184346" timestamp="10203400" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="840" _type="PauseCommand" date="Tue May 03 17:30:19 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="10235027">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[31627]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="841" _type="ShellCommand" date="Tue May 03 17:31:39 EDT 2022" starttimestamp="1651603184346" timestamp="10315593" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="843" _type="ShellCommand" date="Tue May 03 17:31:40 EDT 2022" starttimestamp="1651603184346" timestamp="10316550" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="845" _type="PauseCommand" date="Tue May 03 17:32:00 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="10335925">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[19375]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="844" _type="ShellCommand" date="Tue May 03 17:32:00 EDT 2022" starttimestamp="1651603184346" timestamp="10335925" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="848" _type="PauseCommand" date="Tue May 03 17:33:30 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="10426137">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[90136]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="847" _type="ShellCommand" date="Tue May 03 17:33:30 EDT 2022" starttimestamp="1651603184346" timestamp="10426137" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="850" _type="PauseCommand" date="Tue May 03 17:33:31 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="10427150">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1013]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="849" _type="ShellCommand" date="Tue May 03 17:33:31 EDT 2022" starttimestamp="1651603184346" timestamp="10427150" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="851" _type="ShellCommand" date="Tue May 03 17:33:31 EDT 2022" starttimestamp="1651603184346" timestamp="10427605" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="853" _type="PauseCommand" date="Tue May 03 17:34:02 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="10458191">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[30586]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="852" _type="ShellCommand" date="Tue May 03 17:34:02 EDT 2022" starttimestamp="1651603184346" timestamp="10458191" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="855" _type="PauseCommand" date="Tue May 03 17:34:42 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="10498213">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[40022]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="854" _type="ShellCommand" date="Tue May 03 17:34:42 EDT 2022" starttimestamp="1651603184346" timestamp="10498213" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="857" _type="PauseCommand" date="Tue May 03 17:35:08 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="10523934">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[25721]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="856" _type="ShellCommand" date="Tue May 03 17:35:08 EDT 2022" starttimestamp="1651603184346" timestamp="10523934" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="859" _type="PauseCommand" date="Tue May 03 17:35:12 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="10527908">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3974]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="858" _type="ShellCommand" date="Tue May 03 17:35:12 EDT 2022" starttimestamp="1651603184346" timestamp="10527908" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="861" _type="PauseCommand" date="Tue May 03 17:37:35 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="10671274">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[143366]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="860" _type="ShellCommand" date="Tue May 03 17:37:35 EDT 2022" starttimestamp="1651603184346" timestamp="10671274" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="863" _type="PauseCommand" date="Tue May 03 17:37:40 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="10675761">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4487]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="862" _type="ShellCommand" date="Tue May 03 17:37:40 EDT 2022" starttimestamp="1651603184346" timestamp="10675761" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="865" _type="PauseCommand" date="Tue May 03 17:37:49 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="10685596">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9835]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="864" _type="ShellCommand" date="Tue May 03 17:37:49 EDT 2022" starttimestamp="1651603184346" timestamp="10685596" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="867" _type="PauseCommand" date="Tue May 03 17:38:14 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="10710252">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[24656]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="866" _type="ShellCommand" date="Tue May 03 17:38:14 EDT 2022" starttimestamp="1651603184346" timestamp="10710252" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="869" _type="PauseCommand" date="Tue May 03 17:39:01 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="10757362">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[47110]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="868" _type="ShellCommand" date="Tue May 03 17:39:01 EDT 2022" starttimestamp="1651603184346" timestamp="10757362" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="871" _type="PauseCommand" date="Tue May 03 17:39:05 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="10760673">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3311]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="870" _type="ShellCommand" date="Tue May 03 17:39:05 EDT 2022" starttimestamp="1651603184346" timestamp="10760673" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="873" _type="PauseCommand" date="Tue May 03 17:39:36 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="10791878">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[31205]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="872" _type="ShellCommand" date="Tue May 03 17:39:36 EDT 2022" starttimestamp="1651603184346" timestamp="10791878" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="874" _type="ShellCommand" date="Tue May 03 17:39:36 EDT 2022" starttimestamp="1651603184346" timestamp="10792241" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="876" _type="PauseCommand" date="Tue May 03 17:39:38 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="10794183">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1942]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="875" _type="ShellCommand" date="Tue May 03 17:39:38 EDT 2022" starttimestamp="1651603184346" timestamp="10794183" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="878" _type="PauseCommand" date="Tue May 03 17:39:44 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="10800112">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5929]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="944" _type="ExceptionCommand" date="Tue May 03 17:41:58 EDT 2022" starttimestamp="1651603184346" timestamp="10933951" type="Exception">
    <exceptionString><![CDATA[java.nio.file.NoSuchFileException: C:\Users\User\eclipse-workspace\SML\src\Logs\LocalChecks\comp524f21_assignment4_F21Assignment4SuiteFineGrained.csv
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:478)
	at java.base/java.nio.file.Files.newOutputStream(Files.java:220)
	at java.base/java.nio.file.Files.newBufferedWriter(Files.java:2920)
	at grader.basics.observers.AnAbstractTestLogFileWriter.maybeCreateOrLoadSecondAppendableFile(AnAbstractTestLogFileWriter.java:314)
	at grader.basics.observers.AnAbstractTestLogFileWriter.maybeCreateOrLoadAppendableFile(AnAbstractTestLogFileWriter.java:296)
	at grader.basics.observers.AFineGrainedTestLogFileWriter.testRunStarted(AFineGrainedTestLogFileWriter.java:111)
	at org.junit.runner.notification.SynchronizedRunListener.testRunStarted(SynchronizedRunListener.java:35)
	at org.junit.runner.notification.RunNotifier$1.notifyListener(RunNotifier.java:91)
	at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:72)
	at org.junit.runner.notification.RunNotifier.fireTestRunStarted(RunNotifier.java:88)
	at grader.basics.junit.AGradableJUnitTopLevelSuite.testRunStarted(AGradableJUnitTopLevelSuite.java:107)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="946" _type="ExceptionCommand" date="Tue May 03 17:41:58 EDT 2022" starttimestamp="1651603184346" timestamp="10934596" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.PrintSafety.test(PrintSafety.java:39)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="947" _type="ExceptionCommand" date="Tue May 03 17:41:59 EDT 2022" starttimestamp="1651603184346" timestamp="10935140" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.ConcisePrintSafety.test(ConcisePrintSafety.java:33)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="948" _type="ExceptionCommand" date="Tue May 03 17:42:00 EDT 2022" starttimestamp="1651603184346" timestamp="10935675" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.ListPrintSafety.test(ListPrintSafety.java:45)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="949" _type="ExceptionCommand" date="Tue May 03 17:42:00 EDT 2022" starttimestamp="1651603184346" timestamp="10936155" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.MatchingSafe.test(MatchingSafe.java:42)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="950" _type="ExceptionCommand" date="Tue May 03 17:42:01 EDT 2022" starttimestamp="1651603184346" timestamp="10936736" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.MatchingGivenSafe.test(MatchingGivenSafe.java:33)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="951" _type="ExceptionCommand" date="Tue May 03 17:42:01 EDT 2022" starttimestamp="1651603184346" timestamp="10937263" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.MatchingDerivedSafe.test(MatchingDerivedSafe.java:34)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="953" _type="PauseCommand" date="Tue May 03 17:42:04 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="10940506">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[3243]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="952" _type="ShellCommand" date="Tue May 03 17:42:04 EDT 2022" starttimestamp="1651603184346" timestamp="10940506" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="955" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 17:42:05 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="10940955" type="Run" />
  <Command __id="956" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 17:42:05 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="10940955" type="Run" />
  <Command __id="958" _type="PauseCommand" date="Tue May 03 17:42:15 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="10951406">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[10451]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="957" _type="ShellCommand" date="Tue May 03 17:42:15 EDT 2022" starttimestamp="1651603184346" timestamp="10951406" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="960" _type="PauseCommand" date="Tue May 03 17:42:26 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="10962207">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10801]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="959" _type="ShellCommand" date="Tue May 03 17:42:26 EDT 2022" starttimestamp="1651603184346" timestamp="10962207" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="961" _type="ShellCommand" date="Tue May 03 17:42:26 EDT 2022" starttimestamp="1651603184346" timestamp="10962447" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="963" _type="PauseCommand" date="Tue May 03 17:42:40 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="10976185">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13738]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="962" _type="ShellCommand" date="Tue May 03 17:42:40 EDT 2022" starttimestamp="1651603184346" timestamp="10976185" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="965" _type="PauseCommand" date="Tue May 03 17:42:48 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="10984154">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7969]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="964" _type="ShellCommand" date="Tue May 03 17:42:48 EDT 2022" starttimestamp="1651603184346" timestamp="10984154" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="967" _type="PauseCommand" date="Tue May 03 17:43:06 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="11002179">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18025]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="966" _type="ShellCommand" date="Tue May 03 17:43:06 EDT 2022" starttimestamp="1651603184346" timestamp="11002179" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="969" _type="PauseCommand" date="Tue May 03 17:43:14 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="11010202">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8023]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="968" _type="ShellCommand" date="Tue May 03 17:43:14 EDT 2022" starttimestamp="1651603184346" timestamp="11010202" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="971" _type="PauseCommand" date="Tue May 03 17:43:20 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="11015849">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5647]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="970" _type="ShellCommand" date="Tue May 03 17:43:20 EDT 2022" starttimestamp="1651603184346" timestamp="11015849" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="973" _type="PauseCommand" date="Tue May 03 17:43:21 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="11017378">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1529]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="972" _type="ShellCommand" date="Tue May 03 17:43:21 EDT 2022" starttimestamp="1651603184346" timestamp="11017378" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="975" _type="PauseCommand" date="Tue May 03 17:43:40 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="11035765">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18387]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="974" _type="ShellCommand" date="Tue May 03 17:43:40 EDT 2022" starttimestamp="1651603184346" timestamp="11035765" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="977" _type="PauseCommand" date="Tue May 03 17:45:05 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="11121329">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[85564]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="986" _type="ExceptionCommand" date="Tue May 03 17:46:03 EDT 2022" starttimestamp="1651603184346" timestamp="11178909" type="Exception">
    <exceptionString><![CDATA[java.nio.file.NoSuchFileException: C:\Users\User\eclipse-workspace\SML\src\Logs\LocalChecks\comp524f21_assignment4_F21Assignment4SuiteFineGrained.csv
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:478)
	at java.base/java.nio.file.Files.newOutputStream(Files.java:220)
	at java.base/java.nio.file.Files.newBufferedWriter(Files.java:2920)
	at grader.basics.observers.AnAbstractTestLogFileWriter.maybeCreateOrLoadSecondAppendableFile(AnAbstractTestLogFileWriter.java:314)
	at grader.basics.observers.AnAbstractTestLogFileWriter.maybeCreateOrLoadAppendableFile(AnAbstractTestLogFileWriter.java:296)
	at grader.basics.observers.AFineGrainedTestLogFileWriter.testRunStarted(AFineGrainedTestLogFileWriter.java:111)
	at org.junit.runner.notification.SynchronizedRunListener.testRunStarted(SynchronizedRunListener.java:35)
	at org.junit.runner.notification.RunNotifier$1.notifyListener(RunNotifier.java:91)
	at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:72)
	at org.junit.runner.notification.RunNotifier.fireTestRunStarted(RunNotifier.java:88)
	at grader.basics.junit.AGradableJUnitTopLevelSuite.testRunStarted(AGradableJUnitTopLevelSuite.java:107)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="988" _type="ExceptionCommand" date="Tue May 03 17:46:03 EDT 2022" starttimestamp="1651603184346" timestamp="11179543" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.PrintSafety.test(PrintSafety.java:39)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="989" _type="ExceptionCommand" date="Tue May 03 17:46:04 EDT 2022" starttimestamp="1651603184346" timestamp="11180037" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.ConcisePrintSafety.test(ConcisePrintSafety.java:33)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="990" _type="ExceptionCommand" date="Tue May 03 17:46:04 EDT 2022" starttimestamp="1651603184346" timestamp="11180625" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.ListPrintSafety.test(ListPrintSafety.java:45)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="991" _type="ExceptionCommand" date="Tue May 03 17:46:05 EDT 2022" starttimestamp="1651603184346" timestamp="11181109" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.MatchingSafe.test(MatchingSafe.java:42)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="992" _type="ExceptionCommand" date="Tue May 03 17:46:06 EDT 2022" starttimestamp="1651603184346" timestamp="11181695" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.MatchingGivenSafe.test(MatchingGivenSafe.java:33)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="993" _type="ExceptionCommand" date="Tue May 03 17:46:06 EDT 2022" starttimestamp="1651603184346" timestamp="11182190" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.MatchingDerivedSafe.test(MatchingDerivedSafe.java:34)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="995" _type="PauseCommand" date="Tue May 03 17:46:08 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="11183704">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1514]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="994" _type="ShellCommand" date="Tue May 03 17:46:08 EDT 2022" starttimestamp="1651603184346" timestamp="11183704" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="998" _type="PauseCommand" date="Tue May 03 17:46:10 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="11186436">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[2669]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1031" _type="ConsoleOutput" date="Tue May 03 17:46:55 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="11231030" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2782
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(INSERT,"27"), Diff(EQUAL,"82"), Diff(DELETE,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1033" _type="ShellCommand" date="Tue May 03 17:46:56 EDT 2022" starttimestamp="1651603184346" timestamp="11231929" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1036" _type="PauseCommand" date="Tue May 03 17:46:58 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="11233852">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[1846]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1035" _type="ConsoleOutput" date="Tue May 03 17:46:58 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="11233852" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2768
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):27"), Diff(INSERT,"6"), Diff(EQUAL,"8"), Diff(DELETE,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1038" _type="PauseCommand" date="Tue May 03 17:47:00 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="11236561">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2709]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1037" _type="ConsoleOutput" date="Tue May 03 17:47:00 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="11236561" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2703
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):27"), Diff(DELETE,"68"), Diff(INSERT,"03"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1040" _type="PauseCommand" date="Tue May 03 17:47:01 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="11237645">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1084]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1039" _type="ShellCommand" date="Tue May 03 17:47:01 EDT 2022" starttimestamp="1651603184346" timestamp="11237645" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1042" _type="PauseCommand" date="Tue May 03 17:47:03 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="11239263">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1618]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1041" _type="ConsoleOutput" date="Tue May 03 17:47:03 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="11239263" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2691
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):2"), Diff(DELETE,"703"), Diff(INSERT,"691"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1044" _type="PauseCommand" date="Tue May 03 17:47:07 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="11243472">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4209]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1043" _type="ShellCommand" date="Tue May 03 17:47:07 EDT 2022" starttimestamp="1651603184346" timestamp="11243472" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1046" _type="PauseCommand" date="Tue May 03 17:47:43 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="11279101">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[35629]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1045" _type="ShellCommand" date="Tue May 03 17:47:43 EDT 2022" starttimestamp="1651603184346" timestamp="11279101" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1048" _type="PauseCommand" date="Tue May 03 17:47:49 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="11285577">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6476]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1047" _type="ShellCommand" date="Tue May 03 17:47:49 EDT 2022" starttimestamp="1651603184346" timestamp="11285577" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1050" _type="PauseCommand" date="Tue May 03 17:47:54 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="11290248">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4671]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1049" _type="ShellCommand" date="Tue May 03 17:47:54 EDT 2022" starttimestamp="1651603184346" timestamp="11290248" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1052" _type="PauseCommand" date="Tue May 03 17:48:12 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="11308403">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18155]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1051" _type="ShellCommand" date="Tue May 03 17:48:12 EDT 2022" starttimestamp="1651603184346" timestamp="11308403" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1054" _type="PauseCommand" date="Tue May 03 17:48:33 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="11328695">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[20292]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1053" _type="ShellCommand" date="Tue May 03 17:48:33 EDT 2022" starttimestamp="1651603184346" timestamp="11328695" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1056" _type="PauseCommand" date="Tue May 03 17:49:09 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="11365246">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[36551]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1055" _type="ShellCommand" date="Tue May 03 17:49:09 EDT 2022" starttimestamp="1651603184346" timestamp="11365246" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1057" _type="ShellCommand" date="Tue May 03 17:49:10 EDT 2022" starttimestamp="1651603184346" timestamp="11365666" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1059" _type="PauseCommand" date="Tue May 03 17:49:11 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="11366680">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1014]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1058" _type="ShellCommand" date="Tue May 03 17:49:11 EDT 2022" starttimestamp="1651603184346" timestamp="11366680" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1061" _type="PauseCommand" date="Tue May 03 17:49:12 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="11367705">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1025]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1060" _type="ShellCommand" date="Tue May 03 17:49:12 EDT 2022" starttimestamp="1651603184346" timestamp="11367705" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1063" _type="PauseCommand" date="Tue May 03 17:49:24 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="11379975">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12270]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1062" _type="ShellCommand" date="Tue May 03 17:49:24 EDT 2022" starttimestamp="1651603184346" timestamp="11379975" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1064" _type="ShellCommand" date="Tue May 03 17:49:24 EDT 2022" starttimestamp="1651603184346" timestamp="11380307" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1065" _type="ShellCommand" date="Tue May 03 17:49:25 EDT 2022" starttimestamp="1651603184346" timestamp="11380805" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1067" _type="PauseCommand" date="Tue May 03 17:49:47 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="11402690">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[21885]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1066" _type="ShellCommand" date="Tue May 03 17:49:47 EDT 2022" starttimestamp="1651603184346" timestamp="11402690" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1069" _type="PauseCommand" date="Tue May 03 17:50:01 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="11416745">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14055]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1068" _type="ShellCommand" date="Tue May 03 17:50:01 EDT 2022" starttimestamp="1651603184346" timestamp="11416745" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1071" _type="PauseCommand" date="Tue May 03 17:50:05 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="11421341">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4595]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1070" _type="ShellCommand" date="Tue May 03 17:50:05 EDT 2022" starttimestamp="1651603184346" timestamp="11421340" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1073" _type="PauseCommand" date="Tue May 03 17:50:11 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="11427591">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6251]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1072" _type="ShellCommand" date="Tue May 03 17:50:11 EDT 2022" starttimestamp="1651603184346" timestamp="11427591" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1075" _type="PauseCommand" date="Tue May 03 17:50:33 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="11449467">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[21876]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1074" _type="ShellCommand" date="Tue May 03 17:50:33 EDT 2022" starttimestamp="1651603184346" timestamp="11449467" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1077" _type="PauseCommand" date="Tue May 03 17:54:56 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="11712628">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[263161]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1076" _type="ShellCommand" date="Tue May 03 17:54:56 EDT 2022" starttimestamp="1651603184346" timestamp="11712628" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1078" _type="ShellCommand" date="Tue May 03 17:54:57 EDT 2022" starttimestamp="1651603184346" timestamp="11713391" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1080" _type="PauseCommand" date="Tue May 03 17:55:02 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="11717734">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4343]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1079" _type="ShellCommand" date="Tue May 03 17:55:02 EDT 2022" starttimestamp="1651603184346" timestamp="11717734" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1082" _type="PauseCommand" date="Tue May 03 17:55:25 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="11741447">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[23713]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1081" _type="ShellCommand" date="Tue May 03 17:55:25 EDT 2022" starttimestamp="1651603184346" timestamp="11741447" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1084" _type="PauseCommand" date="Tue May 03 17:57:27 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="11863375">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[121928]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1083" _type="ShellCommand" date="Tue May 03 17:57:27 EDT 2022" starttimestamp="1651603184346" timestamp="11863375" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1085" _type="ShellCommand" date="Tue May 03 17:57:28 EDT 2022" starttimestamp="1651603184346" timestamp="11863710" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1087" _type="PauseCommand" date="Tue May 03 17:59:05 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="11961437">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[97726]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1093" _type="ShellCommand" date="Tue May 03 18:01:07 EDT 2022" starttimestamp="1651603184346" timestamp="12083460" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="462" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:32:58 EDT 2022" docLength="4519" projectName="SML" starttimestamp="1651603184346" timestamp="3193677">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun distInterpolation Distance =¶	if Distance < 6 then 0¶	else¶	if (Distance < 13 andalso Distance >= 6) then 6¶	else¶	if (Distance < 27 andalso Distance >= 13) then 13¶	else¶	27;¶	¶fun durInterpolation Duration =¶	if Duration > 120 then 200¶	else¶	if (Duration > 30 andalso Duration <= 120) then 120¶	else¶	if (Duration > 15 andalso Duration <= 30) then 30¶	else¶	15;¶¶fun exhInterpolation Exhalation = ¶	if Exhalation > 50 then 200¶	else¶	if (Exhalation > 30 andalso Exhalation <= 50) then 50¶	else¶	if (Exhalation > 10 andalso Exhalation <= 30) then 30¶	else¶	10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val intDist = distInterpolation(Distance)¶		val intDur = durInterpolation(Duration)¶		val intExh = exhInterpolation(Exhalation)¶	in¶		givenSafe(intDist, intDur, intExh)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)] : (int * int * int) list;¶¶fun¶	derivedSafeRec (Distance, Duration, Exhalation, nil) = false | ¶	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = ¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		derivedSafeRec (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, listHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, listTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
  </Command>
  <Command __id="509" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:40:20 EDT 2022" docLength="4533" projectName="SML" starttimestamp="1651603184346" timestamp="3636429">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun "), Diff(DELETE,"distI"), Diff(INSERT,"i"), Diff(EQUAL,"nterpolat"), Diff(DELETE,"ion"), Diff(INSERT,"eDistance"), Diff(EQUAL," Distance =¶	if "), Diff(INSERT,"("), Diff(EQUAL,"Distance < 6"), Diff(INSERT,")"), Diff(EQUAL," then 0¶	else"), Diff(DELETE,"¶	"), Diff(INSERT," "), Diff(EQUAL,"if (Distance "), Diff(DELETE,"< 13"), Diff(INSERT,">= 6"), Diff(EQUAL," andalso Distance "), Diff(DELETE,">= 6"), Diff(INSERT,"< 13"), Diff(EQUAL,") then 6¶	else"), Diff(DELETE,"¶	"), Diff(INSERT," "), Diff(EQUAL,"if (Distance "), Diff(DELETE,"< 27"), Diff(INSERT,">= 13"), Diff(EQUAL," andalso Distance "), Diff(DELETE,">= 13"), Diff(INSERT,"< 27"), Diff(EQUAL,") then 13¶	else"), Diff(DELETE,"¶	"), Diff(INSERT," "), Diff(EQUAL,"27;¶	¶fun "), Diff(DELETE,"durI"), Diff(INSERT,"i"), Diff(EQUAL,"nterpolat"), Diff(INSERT,"eDurat"), Diff(EQUAL,"ion Duration =¶	if "), Diff(INSERT,"("), Diff(EQUAL,"Duration > 120"), Diff(INSERT,")"), Diff(EQUAL," then 200¶	else"), Diff(DELETE,"¶	"), Diff(INSERT," "), Diff(EQUAL,"if (Duration > 30 andalso Duration <= 120) then 120¶	else"), Diff(DELETE,"¶	"), Diff(INSERT," "), Diff(EQUAL,"if (Duration > 15 andalso Duration <= 30) then 30¶	else"), Diff(DELETE,"¶	"), Diff(INSERT," "), Diff(EQUAL,"15;¶¶fun "), Diff(DELETE,"exhI"), Diff(INSERT,"i"), Diff(EQUAL,"nterpolat"), Diff(INSERT,"eExhalat"), Diff(EQUAL,"ion Exhalation = ¶	if "), Diff(INSERT,"("), Diff(EQUAL,"Exhalation > 50"), Diff(INSERT,")"), Diff(EQUAL," then 200¶	else¶	if (Exhalation > 30 andalso Exhalation <= 50) then 50¶	else¶	if (Exhalation > 10 andalso Exhalation <= 30) then 30¶	else¶	10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val intDist = "), Diff(DELETE,"distI"), Diff(INSERT,"i"), Diff(EQUAL,"nterpolat"), Diff(DELETE,"ion"), Diff(INSERT,"eDistance"), Diff(EQUAL,"(Distance)¶		val intDur = "), Diff(DELETE,"durI"), Diff(INSERT,"i"), Diff(EQUAL,"nterpolat"), Diff(INSERT,"eDurat"), Diff(EQUAL,"ion(Duration)¶		val intExh = "), Diff(DELETE,"exhI"), Diff(INSERT,"i"), Diff(EQUAL,"nterpolat"), Diff(INSERT,"eExhalat"), Diff(EQUAL,"ion(Exhalation)¶	in¶		givenSafe(intDist, intDur, intExh)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)] : (int * int * int) list;¶¶fun¶	derivedSafeRec (Distance, Duration, Exhalation, nil) = false | ¶	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = ¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		derivedSafeRec (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, listHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, listTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then 200
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then 200
	else
	if (Exhalation > 30 andalso Exhalation <= 50) then 50
	else
	if (Exhalation > 10 andalso Exhalation <= 30) then 30
	else
	10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val intDist = interpolateDistance(Distance)
		val intDur = interpolateDuration(Duration)
		val intExh = interpolateExhalation(Exhalation)
	in
		givenSafe(intDist, intDur, intExh)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list;

fun
	derivedSafeRec (Distance, Duration, Exhalation, nil) = false | 
	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = 
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		derivedSafeRec (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, listHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, listTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="535" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:42:36 EDT 2022" docLength="4541" projectName="SML" starttimestamp="1651603184346" timestamp="3771873">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun interpolateDistance Distance =¶	if (Distance < 6) then 0¶	else if (Distance >= 6 andalso Distance < 13) then 6¶	else if (Distance >= 13 andalso Distance < 27) then 13¶	else 27;¶	¶fun interpolateDuration Duration =¶	if (Duration > 120) then "), Diff(DELETE,"200"), Diff(INSERT,"Int.maxInt"), Diff(EQUAL,"¶	else if (Duration > 30 andalso Duration <= 120) then 120¶	else if (Duration > 15 andalso Duration <= 30) then 30¶	else 15;¶¶fun interpolateExhalation Exhalation = ¶	if (Exhalation > 50) then "), Diff(DELETE,"200"), Diff(INSERT,"Int.maxInt"), Diff(EQUAL,"¶	else"), Diff(DELETE,"¶	"), Diff(INSERT," "), Diff(EQUAL,"if (Exhalation "), Diff(DELETE,"> 3"), Diff(INSERT,"<= 5"), Diff(EQUAL,"0 andalso Exhalation "), Diff(DELETE,"<= 5"), Diff(INSERT,"> 3"), Diff(EQUAL,"0) then 50¶	else"), Diff(DELETE,"¶	"), Diff(INSERT," "), Diff(EQUAL,"if (Exhalation "), Diff(DELETE,"> 1"), Diff(INSERT,"<= 3"), Diff(EQUAL,"0 andalso Exhalation "), Diff(DELETE,"<= 3"), Diff(INSERT,"> 1"), Diff(EQUAL,"0) then 30¶	else"), Diff(DELETE,"¶	"), Diff(INSERT," "), Diff(EQUAL,"10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val intDist = interpolateDistance(Distance)¶		val intDur = interpolateDuration(Duration)¶		val intExh = interpolateExhalation(Exhalation)¶	in¶		givenSafe(intDist, intDur, intExh)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)] : (int * int * int) list;¶¶fun¶	derivedSafeRec (Distance, Duration, Exhalation, nil) = false | ¶	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = ¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		derivedSafeRec (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, listHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, listTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then Int.maxInt
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then Int.maxInt
	else if (Exhalation <= 50 andalso Exhalation > 30) then 50
	else if (Exhalation <= 30 andalso Exhalation > 10) then 30
	else 10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val intDist = interpolateDistance(Distance)
		val intDur = interpolateDuration(Duration)
		val intExh = interpolateExhalation(Exhalation)
	in
		givenSafe(intDist, intDur, intExh)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list;

fun
	derivedSafeRec (Distance, Duration, Exhalation, nil) = false | 
	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = 
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		derivedSafeRec (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, listHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, listTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="546" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:42:53 EDT 2022" docLength="4527" projectName="SML" starttimestamp="1651603184346" timestamp="3789641">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun interpolateDistance Distance =¶	if (Distance < 6) then 0¶	else if (Distance >= 6 andalso Distance < 13) then 6¶	else if (Distance >= 13 andalso Distance < 27) then 13¶	else 27;¶	¶fun interpolateDuration Duration =¶	if (Duration > 120) then "), Diff(DELETE,"Int.maxInt"), Diff(INSERT,"200"), Diff(EQUAL,"¶	else if (Duration > 30 andalso Duration <= 120) then 120¶	else if (Duration > 15 andalso Duration <= 30) then 30¶	else 15;¶¶fun interpolateExhalation Exhalation = ¶	if (Exhalation > 50) then "), Diff(DELETE,"Int.maxInt"), Diff(INSERT,"200"), Diff(EQUAL,"¶	else if (Exhalation <= 50 andalso Exhalation > 30) then 50¶	else if (Exhalation <= 30 andalso Exhalation > 10) then 30¶	else 10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val intDist = interpolateDistance(Distance)¶		val intDur = interpolateDuration(Duration)¶		val intExh = interpolateExhalation(Exhalation)¶	in¶		givenSafe(intDist, intDur, intExh)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)] : (int * int * int) list;¶¶fun¶	derivedSafeRec (Distance, Duration, Exhalation, nil) = false | ¶	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = ¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		derivedSafeRec (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, listHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, listTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then 200
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then 200
	else if (Exhalation <= 50 andalso Exhalation > 30) then 50
	else if (Exhalation <= 30 andalso Exhalation > 10) then 30
	else 10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val intDist = interpolateDistance(Distance)
		val intDur = interpolateDuration(Duration)
		val intExh = interpolateExhalation(Exhalation)
	in
		givenSafe(intDist, intDur, intExh)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list;

fun
	derivedSafeRec (Distance, Duration, Exhalation, nil) = false | 
	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = 
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		derivedSafeRec (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, listHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, listTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="606" _type="DiffBasedFileOpenCommand" date="Tue May 03 15:46:10 EDT 2022" docLength="4553" projectName="SML" starttimestamp="1651603184346" timestamp="3986303">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun interpolateDistance Distance =¶	if (Distance < 6) then 0¶	else if (Distance >= 6 andalso Distance < 13) then 6¶	else if (Distance >= 13 andalso Distance < 27) then 13¶	else 27;¶	¶fun interpolateDuration Duration =¶	if (Duration > 120) then "), Diff(DELETE,"200"), Diff(INSERT,"valOf Int.maxInt"), Diff(EQUAL,"¶	else if (Duration > 30 andalso Duration <= 120) then 120¶	else if (Duration > 15 andalso Duration <= 30) then 30¶	else 15;¶¶fun interpolateExhalation Exhalation = ¶	if (Exhalation > 50) then "), Diff(DELETE,"200"), Diff(INSERT,"valOf Int.maxInt"), Diff(EQUAL,"¶	else if (Exhalation <= 50 andalso Exhalation > 30) then 50¶	else if (Exhalation <= 30 andalso Exhalation > 10) then 30¶	else 10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val intDist = interpolateDistance(Distance)¶		val intDur = interpolateDuration(Duration)¶		val intExh = interpolateExhalation(Exhalation)¶	in¶		givenSafe(intDist, intDur, intExh)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)] : (int * int * int) list;¶¶fun¶	derivedSafeRec (Distance, Duration, Exhalation, nil) = false | ¶	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = ¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		derivedSafeRec (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, listHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, listTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then valOf Int.maxInt
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then valOf Int.maxInt
	else if (Exhalation <= 50 andalso Exhalation > 30) then 50
	else if (Exhalation <= 30 andalso Exhalation > 10) then 30
	else 10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val intDist = interpolateDistance(Distance)
		val intDur = interpolateDuration(Duration)
		val intExh = interpolateExhalation(Exhalation)
	in
		givenSafe(intDist, intDur, intExh)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)] : (int * int * int) list;

fun
	derivedSafeRec (Distance, Duration, Exhalation, nil) = false | 
	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = 
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		derivedSafeRec (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, listHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, listTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="690" _type="DiffBasedFileOpenCommand" date="Tue May 03 16:40:41 EDT 2022" docLength="4541" projectName="SML" starttimestamp="1651603184346" timestamp="7256868">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun interpolateDistance Distance =¶	if (Distance < 6) then 0¶	else if (Distance >= 6 andalso Distance < 13) then 6¶	else if (Distance >= 13 andalso Distance < 27) then 13¶	else 27;¶	¶fun interpolateDuration Duration =¶	if (Duration > 120) then valOf Int.maxInt¶	else if (Duration > 30 andalso Duration <= 120) then 120¶	else if (Duration > 15 andalso Duration <= 30) then 30¶	else 15;¶¶fun interpolateExhalation Exhalation = ¶	if (Exhalation > 50) then valOf Int.maxInt¶	else if (Exhalation <= 50 andalso Exhalation > 30) then 50¶	else if (Exhalation <= 30 andalso Exhalation > 10) then 30¶	else 10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val int"), Diff(INSERT,"erpolated"), Diff(EQUAL,"Dist = interpolateDistance(Distance)¶		val int"), Diff(INSERT,"erpolated"), Diff(EQUAL,"Dur = interpolateDuration(Duration)¶		val int"), Diff(DELETE,"Exh"), Diff(INSERT,"erpolatedExhale"), Diff(EQUAL," = interpolateExhalation(Exhalation)¶	in¶		givenSafe(int"), Diff(DELETE,"Dist, intDur, intExh"), Diff(INSERT,"erpolatedDist, interpolatedDur, interpolatedExhale"), Diff(EQUAL,")¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)]"), Diff(DELETE," : "), Diff(INSERT,":"), Diff(EQUAL,"(int * int * int)"), Diff(DELETE," "), Diff(EQUAL,"list;¶¶fun¶	"), Diff(DELETE,"derivedSafeRec (Distance, Duration, Exhalation, nil) = false | ¶	"), Diff(EQUAL,"derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = ¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else"), Diff(DELETE,"¶		"), Diff(INSERT," "), Diff(EQUAL,"derivedSafeRec (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, listHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, listTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then valOf Int.maxInt
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then valOf Int.maxInt
	else if (Exhalation <= 50 andalso Exhalation > 30) then 50
	else if (Exhalation <= 30 andalso Exhalation > 10) then 30
	else 10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val interpolatedDist = interpolateDistance(Distance)
		val interpolatedDur = interpolateDuration(Duration)
		val interpolatedExhale = interpolateExhalation(Exhalation)
	in
		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)]:(int * int * int)list;

fun
	derivedSafeRec (Distance, Duration, Exhalation, (Dist, Dur, Exh) :: tail) = 
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else derivedSafeRec (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafeRec(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, listHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, listTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="712" _type="DiffBasedFileOpenCommand" date="Tue May 03 16:44:49 EDT 2022" docLength="4647" projectName="SML" starttimestamp="1651603184346" timestamp="7505209">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun interpolateDistance Distance =¶	if (Distance < 6) then 0¶	else if (Distance >= 6 andalso Distance < 13) then 6¶	else if (Distance >= 13 andalso Distance < 27) then 13¶	else 27;¶	¶fun interpolateDuration Duration =¶	if (Duration > 120) then valOf Int.maxInt¶	else if (Duration > 30 andalso Duration <= 120) then 120¶	else if (Duration > 15 andalso Duration <= 30) then 30¶	else 15;¶¶fun interpolateExhalation Exhalation = ¶	if (Exhalation > 50) then valOf Int.maxInt¶	else if (Exhalation <= 50 andalso Exhalation > 30) then 50¶	else if (Exhalation <= 30 andalso Exhalation > 10) then 30¶	else 10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val interpolatedDist = interpolateDistance(Distance)¶		val interpolatedDur = interpolateDuration(Duration)¶		val interpolatedExhale = interpolateExhalation(Exhalation)¶	in¶		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)]:(int * int * int)list;¶¶fun¶	derivedSafe"), Diff(DELETE,"Rec (Distance, Duration, Exhalation, (Dist, Dur, Exh"), Diff(INSERT," (Distance, Duration, Exhalation, nil) = false ¶	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale"), Diff(EQUAL,") :: tail) = ¶		if (Distance >= "), Diff(DELETE,"Dist"), Diff(INSERT,"tableDistance"), Diff(EQUAL," andalso Duration <= "), Diff(DELETE,"Dur"), Diff(INSERT,"tableDuration"), Diff(EQUAL," andalso Exhalation <= "), Diff(DELETE,"Exh"), Diff(INSERT,"tableExhale"), Diff(EQUAL,") then true¶		else derivedSafe"), Diff(DELETE,"Rec"), Diff(EQUAL," (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe"), Diff(DELETE,"Rec"), Diff(EQUAL,"(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, listHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, listTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then valOf Int.maxInt
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then valOf Int.maxInt
	else if (Exhalation <= 50 andalso Exhalation > 30) then 50
	else if (Exhalation <= 30 andalso Exhalation > 10) then 30
	else 10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val interpolatedDist = interpolateDistance(Distance)
		val interpolatedDur = interpolateDuration(Duration)
		val interpolatedExhale = interpolateExhalation(Exhalation)
	in
		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)]:(int * int * int)list;

fun
	derivedSafe (Distance, Duration, Exhalation, nil) = false 
	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = 
		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true
		else derivedSafe (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, listHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, listTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="746" _type="DiffBasedFileOpenCommand" date="Tue May 03 16:45:59 EDT 2022" docLength="4648" projectName="SML" starttimestamp="1651603184346" timestamp="7574741">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun interpolateDistance Distance =¶	if (Distance < 6) then 0¶	else if (Distance >= 6 andalso Distance < 13) then 6¶	else if (Distance >= 13 andalso Distance < 27) then 13¶	else 27;¶	¶fun interpolateDuration Duration =¶	if (Duration > 120) then valOf Int.maxInt¶	else if (Duration > 30 andalso Duration <= 120) then 120¶	else if (Duration > 15 andalso Duration <= 30) then 30¶	else 15;¶¶fun interpolateExhalation Exhalation = ¶	if (Exhalation > 50) then valOf Int.maxInt¶	else if (Exhalation <= 50 andalso Exhalation > 30) then 50¶	else if (Exhalation <= 30 andalso Exhalation > 10) then 30¶	else 10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val interpolatedDist = interpolateDistance(Distance)¶		val interpolatedDur = interpolateDuration(Duration)¶		val interpolatedExhale = interpolateExhalation(Exhalation)¶	in¶		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)]:(int * int * int)list;¶¶fun¶	derivedSafe (Distance, Duration, Exhalation, nil) = false "), Diff(INSERT,"|"), Diff(EQUAL,"¶	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = ¶		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true¶		else derivedSafe (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, listHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, listTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then valOf Int.maxInt
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then valOf Int.maxInt
	else if (Exhalation <= 50 andalso Exhalation > 30) then 50
	else if (Exhalation <= 30 andalso Exhalation > 10) then 30
	else 10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val interpolatedDist = interpolateDistance(Distance)
		val interpolatedDur = interpolateDuration(Duration)
		val interpolatedExhale = interpolateExhalation(Exhalation)
	in
		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)]:(int * int * int)list;

fun
	derivedSafe (Distance, Duration, Exhalation, nil) = false |
	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = 
		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true
		else derivedSafe (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, listHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, listTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="846" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:32:00 EDT 2022" docLength="4642" projectName="SML" starttimestamp="1651603184346" timestamp="10336001">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun interpolateDistance Distance =¶	if (Distance < 6) then 0¶	else if (Distance >= 6 andalso Distance < 13) then 6¶	else if (Distance >= 13 andalso Distance < 27) then 13¶	else 27;¶	¶fun interpolateDuration Duration =¶	if (Duration > 120) then valOf Int.maxInt¶	else if (Duration > 30 andalso Duration <= 120) then 120¶	else if (Duration > 15 andalso Duration <= 30) then 30¶	else 15;¶¶fun interpolateExhalation Exhalation = ¶	if (Exhalation > 50) then valOf Int.maxInt¶	else if (Exhalation <= 50 andalso Exhalation > 30) then 50¶	else if (Exhalation <= 30 andalso Exhalation > 10) then 30¶	else 10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val interpolatedDist = interpolateDistance(Distance)¶		val interpolatedDur = interpolateDuration(Duration)¶		val interpolatedExhale = interpolateExhalation(Exhalation)¶	in¶		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)]:(int * int * int)list;¶¶fun¶	derivedSafe (Distance, Duration, Exhalation, nil) = false |¶	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = ¶		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true¶		else derivedSafe (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else"), Diff(DELETE,"¶		"), Diff(INSERT," "), Diff(EQUAL,"print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else"), Diff(DELETE,"¶		"), Diff(INSERT," "), Diff(EQUAL,"print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, listHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, listTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then valOf Int.maxInt
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then valOf Int.maxInt
	else if (Exhalation <= 50 andalso Exhalation > 30) then 50
	else if (Exhalation <= 30 andalso Exhalation > 10) then 30
	else 10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val interpolatedDist = interpolateDistance(Distance)
		val interpolatedDur = interpolateDuration(Duration)
		val interpolatedExhale = interpolateExhalation(Exhalation)
	in
		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)]:(int * int * int)list;

fun
	derivedSafe (Distance, Duration, Exhalation, nil) = false |
	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = 
		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true
		else derivedSafe (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, listHead :: listTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, listHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, listTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="900" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:40:45 EDT 2022" docLength="4654" projectName="SML" starttimestamp="1651603184346" timestamp="10861407">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun interpolateDistance Distance =¶	if (Distance < 6) then 0¶	else if (Distance >= 6 andalso Distance < 13) then 6¶	else if (Distance >= 13 andalso Distance < 27) then 13¶	else 27;¶	¶fun interpolateDuration Duration =¶	if (Duration > 120) then valOf Int.maxInt¶	else if (Duration > 30 andalso Duration <= 120) then 120¶	else if (Duration > 15 andalso Duration <= 30) then 30¶	else 15;¶¶fun interpolateExhalation Exhalation = ¶	if (Exhalation > 50) then valOf Int.maxInt¶	else if (Exhalation <= 50 andalso Exhalation > 30) then 50¶	else if (Exhalation <= 30 andalso Exhalation > 10) then 30¶	else 10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val interpolatedDist = interpolateDistance(Distance)¶		val interpolatedDur = interpolateDuration(Duration)¶		val interpolatedExhale = interpolateExhalation(Exhalation)¶	in¶		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)]:(int * int * int)list;¶¶fun¶	derivedSafe (Distance, Duration, Exhalation, nil) = false |¶	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = ¶		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true¶		else derivedSafe (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, "), Diff(DELETE,"list"), Diff(INSERT,"feature"), Diff(EQUAL,"Head :: "), Diff(DELETE,"list"), Diff(INSERT,"feature"), Diff(EQUAL,"Tail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, "), Diff(DELETE,"list"), Diff(INSERT,"feature"), Diff(EQUAL,"Head)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, "), Diff(DELETE,"list"), Diff(INSERT,"feature"), Diff(EQUAL,"Tail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶"), Diff(INSERT,"fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶"), Diff(EQUAL,"fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matching"), Diff(DELETE,"Der"), Diff(INSERT,"G"), Diff(EQUAL,"ive"), Diff(DELETE,"d"), Diff(INSERT,"n"), Diff(EQUAL,"Safe(Distance, Duration, Exhalation) = matchingSafe("), Diff(DELETE,"der"), Diff(INSERT,"g"), Diff(EQUAL,"ive"), Diff(DELETE,"d"), Diff(INSERT,"n"), Diff(EQUAL,"SafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶"), Diff(DELETE,"fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶"), Diff(EQUAL,"fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then valOf Int.maxInt
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then valOf Int.maxInt
	else if (Exhalation <= 50 andalso Exhalation > 30) then 50
	else if (Exhalation <= 30 andalso Exhalation > 10) then 30
	else 10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val interpolatedDist = interpolateDistance(Distance)
		val interpolatedDur = interpolateDuration(Duration)
		val interpolatedExhale = interpolateExhalation(Exhalation)
	in
		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)]:(int * int * int)list;

fun
	derivedSafe (Distance, Duration, Exhalation, nil) = false |
	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = 
		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true
		else derivedSafe (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, featureHead :: featureTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, featureHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, featureTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="937" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:41:36 EDT 2022" docLength="4654" projectName="SML" starttimestamp="1651603184346" timestamp="10912534">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun interpolateDistance Distance =¶	if (Distance < 6) then 0¶	else if (Distance >= 6 andalso Distance < 13) then 6¶	else if (Distance >= 13 andalso Distance < 27) then 13¶	else 27;¶	¶fun interpolateDuration Duration =¶	if (Duration > 120) then valOf Int.maxInt¶	else if (Duration > 30 andalso Duration <= 120) then 120¶	else if (Duration > 15 andalso Duration <= 30) then 30¶	else 15;¶¶fun interpolateExhalation Exhalation = ¶	if (Exhalation > 50) then valOf Int.maxInt¶	else if (Exhalation <= 50 andalso Exhalation > 30) then 50¶	else if (Exhalation <= 30 andalso Exhalation > 10) then 30¶	else 10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val interpolatedDist = interpolateDistance(Distance)¶		val interpolatedDur = interpolateDuration(Duration)¶		val interpolatedExhale = interpolateExhalation(Exhalation)¶	in¶		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)]:(int * int * int)list;¶¶fun¶	derivedSafe (Distance, Duration, Exhalation, nil) = false |¶	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = ¶		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true¶		else derivedSafe (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, featureHead :: featureTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, featureHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, featureTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶"), Diff(DELETE,"fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶"), Diff(EQUAL,"fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matching"), Diff(DELETE,"G"), Diff(INSERT,"Der"), Diff(EQUAL,"ive"), Diff(DELETE,"n"), Diff(INSERT,"d"), Diff(EQUAL,"Safe(Distance, Duration, Exhalation) = matchingSafe("), Diff(DELETE,"g"), Diff(INSERT,"der"), Diff(EQUAL,"ive"), Diff(DELETE,"n"), Diff(INSERT,"d"), Diff(EQUAL,"SafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶"), Diff(INSERT,"fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶"), Diff(EQUAL,"fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then valOf Int.maxInt
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then valOf Int.maxInt
	else if (Exhalation <= 50 andalso Exhalation > 30) then 50
	else if (Exhalation <= 30 andalso Exhalation > 10) then 30
	else 10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val interpolatedDist = interpolateDistance(Distance)
		val interpolatedDur = interpolateDuration(Duration)
		val interpolatedExhale = interpolateExhalation(Exhalation)
	in
		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)]:(int * int * int)list;

fun
	derivedSafe (Distance, Duration, Exhalation, nil) = false |
	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = 
		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true
		else derivedSafe (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, featureHead :: featureTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, featureHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, featureTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="954" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:42:04 EDT 2022" docLength="4654" projectName="SML" starttimestamp="1651603184346" timestamp="10940571">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun interpolateDistance Distance =¶	if (Distance < 6) then 0¶	else if (Distance >= 6 andalso Distance < 13) then 6¶	else if (Distance >= 13 andalso Distance < 27) then 13¶	else 27;¶	¶fun interpolateDuration Duration =¶	if (Duration > 120) then valOf Int.maxInt¶	else if (Duration > 30 andalso Duration <= 120) then 120¶	else if (Duration > 15 andalso Duration <= 30) then 30¶	else 15;¶¶fun interpolateExhalation Exhalation = ¶	if (Exhalation > 50) then valOf Int.maxInt¶	else if (Exhalation <= 50 andalso Exhalation > 30) then 50¶	else if (Exhalation <= 30 andalso Exhalation > 10) then 30¶	else 10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val interpolatedDist = interpolateDistance(Distance)¶		val interpolatedDur = interpolateDuration(Duration)¶		val interpolatedExhale = interpolateExhalation(Exhalation)¶	in¶		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)]:(int * int * int)list;¶¶fun¶	derivedSafe (Distance, Duration, Exhalation, nil) = false |¶	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = ¶		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true¶		else derivedSafe (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, featureHead :: featureTail) =¶				let ¶						val printOutput = printSafetyFun(safetyComputer, featureHead)¶				in¶						listPrintSafety(printSafetyFun, safetyComputer, featureTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶"), Diff(INSERT,"fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶"), Diff(EQUAL,"fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matching"), Diff(DELETE,"Der"), Diff(INSERT,"G"), Diff(EQUAL,"ive"), Diff(DELETE,"d"), Diff(INSERT,"n"), Diff(EQUAL,"Safe(Distance, Duration, Exhalation) = matchingSafe("), Diff(DELETE,"der"), Diff(INSERT,"g"), Diff(EQUAL,"ive"), Diff(DELETE,"d"), Diff(INSERT,"n"), Diff(EQUAL,"SafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶"), Diff(DELETE,"fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶"), Diff(EQUAL,"fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then valOf Int.maxInt
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then valOf Int.maxInt
	else if (Exhalation <= 50 andalso Exhalation > 30) then 50
	else if (Exhalation <= 30 andalso Exhalation > 10) then 30
	else 10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val interpolatedDist = interpolateDistance(Distance)
		val interpolatedDur = interpolateDuration(Duration)
		val interpolatedExhale = interpolateExhalation(Exhalation)
	in
		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)]:(int * int * int)list;

fun
	derivedSafe (Distance, Duration, Exhalation, nil) = false |
	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = 
		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true
		else derivedSafe (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, featureHead :: featureTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, featureHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, featureTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="996" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:46:08 EDT 2022" docLength="4567" projectName="SML" starttimestamp="1651603184346" timestamp="11183767">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun interpolateDistance Distance =¶	if (Distance < 6) then 0¶	else if (Distance >= 6 andalso Distance < 13) then 6¶	else if (Distance >= 13 andalso Distance < 27) then 13¶	else 27;¶	¶fun interpolateDuration Duration =¶	if (Duration > 120) then valOf Int.maxInt¶	else if (Duration > 30 andalso Duration <= 120) then 120¶	else if (Duration > 15 andalso Duration <= 30) then 30¶	else 15;¶¶fun interpolateExhalation Exhalation = ¶	if (Exhalation > 50) then valOf Int.maxInt¶	else if (Exhalation <= 50 andalso Exhalation > 30) then 50¶	else if (Exhalation <= 30 andalso Exhalation > 10) then 30¶	else 10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val interpolatedDist = interpolateDistance(Distance)¶		val interpolatedDur = interpolateDuration(Duration)¶		val interpolatedExhale = interpolateExhalation(Exhalation)¶	in¶		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)]:(int * int * int)list;¶¶fun¶	derivedSafe (Distance, Duration, Exhalation, nil) = false |¶	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = ¶		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true¶		else derivedSafe (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, featureHead :: featureTail) =¶				"), Diff(DELETE,"let ¶						val printOutput = printSafetyFun(safetyComputer, featureHead)¶				in¶				"), Diff(EQUAL,"		listPrintSafety(printSafetyFun, safetyComputer, featureTail)¶"), Diff(INSERT,""), Diff(EQUAL,"				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶"), Diff(DELETE,"fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶"), Diff(EQUAL,"fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matching"), Diff(DELETE,"G"), Diff(INSERT,"Der"), Diff(EQUAL,"ive"), Diff(DELETE,"n"), Diff(INSERT,"d"), Diff(EQUAL,"Safe(Distance, Duration, Exhalation) = matchingSafe("), Diff(DELETE,"g"), Diff(INSERT,"der"), Diff(EQUAL,"ive"), Diff(DELETE,"n"), Diff(INSERT,"d"), Diff(EQUAL,"SafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶"), Diff(DELETE,""), Diff(EQUAL,"		false;¶¶"), Diff(INSERT,"fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶"), Diff(EQUAL,"fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then valOf Int.maxInt
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then valOf Int.maxInt
	else if (Exhalation <= 50 andalso Exhalation > 30) then 50
	else if (Exhalation <= 30 andalso Exhalation > 10) then 30
	else 10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val interpolatedDist = interpolateDistance(Distance)
		val interpolatedDur = interpolateDuration(Duration)
		val interpolatedExhale = interpolateExhalation(Exhalation)
	in
		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)]:(int * int * int)list;

fun
	derivedSafe (Distance, Duration, Exhalation, nil) = false |
	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = 
		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true
		else derivedSafe (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, featureHead :: featureTail) =
						listPrintSafety(printSafetyFun, safetyComputer, featureTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="1034" _type="DiffBasedFileOpenCommand" date="Tue May 03 17:46:56 EDT 2022" docLength="4654" projectName="SML" starttimestamp="1651603184346" timestamp="11232006">
    <filePath><![CDATA[C:\Users\User\eclipse-workspace\SML\src\SocialDistance.sml]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"fun givenSafe(13,30,30) = true |¶		givenSafe(6,30,10) = true |¶		givenSafe(27,30,50) = true |¶		givenSafe(13,15,50) = true |¶		givenSafe(13,120,10) = true |¶		givenSafe(27,120,30) = true |¶		givenSafe(6,15,30) = true |¶		givenSafe(Distance, Duration, Exhalation) = false;¶¶fun interpolateDistance Distance =¶	if (Distance < 6) then 0¶	else if (Distance >= 6 andalso Distance < 13) then 6¶	else if (Distance >= 13 andalso Distance < 27) then 13¶	else 27;¶	¶fun interpolateDuration Duration =¶	if (Duration > 120) then valOf Int.maxInt¶	else if (Duration > 30 andalso Duration <= 120) then 120¶	else if (Duration > 15 andalso Duration <= 30) then 30¶	else 15;¶¶fun interpolateExhalation Exhalation = ¶	if (Exhalation > 50) then valOf Int.maxInt¶	else if (Exhalation <= 50 andalso Exhalation > 30) then 50¶	else if (Exhalation <= 30 andalso Exhalation > 10) then 30¶	else 10;¶¶fun interpolatedSafe (Distance, Duration, Exhalation) = ¶	let¶		val interpolatedDist = interpolateDistance(Distance)¶		val interpolatedDur = interpolateDuration(Duration)¶		val interpolatedExhale = interpolateExhalation(Exhalation)¶	in¶		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)¶	end;¶	¶val SAFETY_TABLE =¶  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),¶   (6,15,30)]:(int * int * int)list;¶¶fun¶	derivedSafe (Distance, Duration, Exhalation, nil) = false |¶	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = ¶		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true¶		else derivedSafe (Distance, Duration, Exhalation, tail);¶		¶fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);¶¶	¶fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")¶		else print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");¶¶		¶fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = ¶		if (safetyComputer(Distance, Duration, Exhalation)) then¶		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")¶		else print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");¶		¶fun ¶		listPrintSafety (_, _, nil) = () |¶		listPrintSafety (printSafetyFun, safetyComputer, featureHead :: featureTail) =¶				"), Diff(INSERT,"let ¶						val printOutput = printSafetyFun(safetyComputer, featureHead)¶				in¶				"), Diff(EQUAL,"		listPrintSafety(printSafetyFun, safetyComputer, featureTail)¶				end;¶¶fun¶	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | ¶	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = ¶		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true¶		else¶		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));¶¶¶fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true¶		else¶		false;¶¶fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));¶¶fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =¶		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true¶		else¶		false;¶¶fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));¶¶fun toThreeArgumentCurryableFunction¶	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);¶¶val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;¶¶val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;¶¶val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;¶¶fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));¶¶val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;¶¶val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;")]]]></diff>
    <snapshot><![CDATA[fun givenSafe(13,30,30) = true |
		givenSafe(6,30,10) = true |
		givenSafe(27,30,50) = true |
		givenSafe(13,15,50) = true |
		givenSafe(13,120,10) = true |
		givenSafe(27,120,30) = true |
		givenSafe(6,15,30) = true |
		givenSafe(Distance, Duration, Exhalation) = false;

fun interpolateDistance Distance =
	if (Distance < 6) then 0
	else if (Distance >= 6 andalso Distance < 13) then 6
	else if (Distance >= 13 andalso Distance < 27) then 13
	else 27;
	
fun interpolateDuration Duration =
	if (Duration > 120) then valOf Int.maxInt
	else if (Duration > 30 andalso Duration <= 120) then 120
	else if (Duration > 15 andalso Duration <= 30) then 30
	else 15;

fun interpolateExhalation Exhalation = 
	if (Exhalation > 50) then valOf Int.maxInt
	else if (Exhalation <= 50 andalso Exhalation > 30) then 50
	else if (Exhalation <= 30 andalso Exhalation > 10) then 30
	else 10;

fun interpolatedSafe (Distance, Duration, Exhalation) = 
	let
		val interpolatedDist = interpolateDistance(Distance)
		val interpolatedDur = interpolateDuration(Duration)
		val interpolatedExhale = interpolateExhalation(Exhalation)
	in
		givenSafe(interpolatedDist, interpolatedDur, interpolatedExhale)
	end;
	
val SAFETY_TABLE =
  [(13,30,30),(6,30,10),(27,30,50),(13,15,50),(13,120,10),(27,120,30),
   (6,15,30)]:(int * int * int)list;

fun
	derivedSafe (Distance, Duration, Exhalation, nil) = false |
	derivedSafe (Distance, Duration, Exhalation, (tableDistance, tableDuration, tableExhale) :: tail) = 
		if (Distance >= tableDistance andalso Duration <= tableDuration andalso Exhalation <= tableExhale) then true
		else derivedSafe (Distance, Duration, Exhalation, tail);
		
fun listDerivedSafe(Distance, Duration, Exhalation) = derivedSafe(Distance, Duration, Exhalation, SAFETY_TABLE);

	
fun printSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:true"^"\n")
		else print("Distance:"^Int.toString(Distance)^" Duration:"^Int.toString(Duration)^" Exhalation:"^Int.toString(Exhalation)^" Safe:false"^"\n");

		
fun concisePrintSafety (safetyComputer, (Distance, Duration, Exhalation)) = 
		if (safetyComputer(Distance, Duration, Exhalation)) then
		print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", true)"^"\n")
		else print("("^Int.toString(Distance)^", "^Int.toString(Duration)^", "^Int.toString(Exhalation)^", false)"^"\n");
		
fun 
		listPrintSafety (_, _, nil) = () |
		listPrintSafety (printSafetyFun, safetyComputer, featureHead :: featureTail) =
				let 
						val printOutput = printSafetyFun(safetyComputer, featureHead)
				in
						listPrintSafety(printSafetyFun, safetyComputer, featureTail)
				end;

fun
	matchingSafeRec (matcherFun, nil, (Distance, Duration, Exhalation)) = false | 
	matchingSafeRec (matcherFun, (Dist, Dur, Exh) :: tail, (Distance, Duration, Exhalation)) = 
		if matcherFun((Dist, Dur, Exh), (Distance, Duration, Exhalation)) then true
		else
		matchingSafeRec (matcherFun, tail, (Distance, Duration, Exhalation));


fun matchingSafe(matcherFun, (Distance, Duration, Exhalation)) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

fun derivedSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance >= Dist andalso Duration <= Dur andalso Exhalation <= Exh) then true
		else
		false;

fun matchingDerivedSafe(Distance, Duration, Exhalation) = matchingSafe(derivedSafeMatcher, (Distance, Duration, Exhalation));

fun givenSafeMatcher((Dist, Dur, Exh), (Distance, Duration, Exhalation)) =
		if (Distance = Dist andalso Duration = Dur andalso Exhalation = Exh) then true
		else
		false;

fun matchingGivenSafe(Distance, Duration, Exhalation) = matchingSafe(givenSafeMatcher, (Distance, Duration, Exhalation));

fun toThreeArgumentCurryableFunction
	tupleBasedThreeArgumentFunction x y z = tupleBasedThreeArgumentFunction (x, y, z);

val curryableInterpolatedSafe = toThreeArgumentCurryableFunction interpolatedSafe;

val curriedOnceInterpolatedSafe = curryableInterpolatedSafe 13;

val curriedTwiceInterpolatedSafe = curriedOnceInterpolatedSafe 30;

fun curryableMatchingSafe matcherFun (Distance, Duration, Exhalation) = matchingSafeRec(matcherFun, SAFETY_TABLE, (Distance, Duration, Exhalation));

val curriedMatchingDerivedSafe = curryableMatchingSafe derivedSafeMatcher;

val curriedMatchingGivenSafe = curryableMatchingSafe givenSafeMatcher;]]></snapshot>
  </Command>
  <Command __id="1096" _type="PauseCommand" date="Tue May 03 18:01:09 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="12084841">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1381]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1098" _type="PauseCommand" date="Tue May 03 18:01:15 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="12091269">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[6428]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1099" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 18:01:17 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="12092938" type="Run" />
  <Command __id="1101" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 18:01:17 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="12092938" type="Run" />
  <Command __id="1102" _type="ExceptionCommand" date="Tue May 03 18:01:18 EDT 2022" starttimestamp="1651603184346" timestamp="12093867" type="Exception">
    <exceptionString><![CDATA[java.nio.file.NoSuchFileException: C:\Users\User\eclipse-workspace\SML\src\Logs\LocalChecks\comp524f21_assignment4_F21Assignment4SuiteFineGrained.csv
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:478)
	at java.base/java.nio.file.Files.newOutputStream(Files.java:220)
	at java.base/java.nio.file.Files.newBufferedWriter(Files.java:2920)
	at grader.basics.observers.AnAbstractTestLogFileWriter.maybeCreateOrLoadSecondAppendableFile(AnAbstractTestLogFileWriter.java:314)
	at grader.basics.observers.AnAbstractTestLogFileWriter.maybeCreateOrLoadAppendableFile(AnAbstractTestLogFileWriter.java:296)
	at grader.basics.observers.AFineGrainedTestLogFileWriter.testRunStarted(AFineGrainedTestLogFileWriter.java:111)
	at org.junit.runner.notification.SynchronizedRunListener.testRunStarted(SynchronizedRunListener.java:35)
	at org.junit.runner.notification.RunNotifier$1.notifyListener(RunNotifier.java:91)
	at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:72)
	at org.junit.runner.notification.RunNotifier.fireTestRunStarted(RunNotifier.java:88)
	at grader.basics.junit.AGradableJUnitTopLevelSuite.testRunStarted(AGradableJUnitTopLevelSuite.java:107)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1103" _type="ConsoleOutput" date="Tue May 03 18:01:18 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="12093967" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Found a source file:C:\Users\User\eclipse-workspace\SML\src\Greeting.sml¶Assuming src folder is:C:\Users\User\eclipse-workspace\SML\src"), Diff(INSERT,"Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1105" _type="PauseCommand" date="Tue May 03 18:01:21 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="12097406">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3439]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1104" _type="ConsoleOutput" date="Tue May 03 18:01:21 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="12097406" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):1"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1107" _type="PauseCommand" date="Tue May 03 18:01:27 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="12103075">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5669]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1106" _type="ConsoleOutput" date="Tue May 03 18:01:27 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="12103075" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):9120
Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):9120¶"), Diff(EQUAL,"Number of traces > 600  turning tracing off¶")]]]></diff>
  </Command>
  <Command __id="1109" _type="PauseCommand" date="Tue May 03 18:01:30 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="12106502">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3427]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1108" _type="ConsoleOutput" date="Tue May 03 18:01:30 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="12106502" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):9120¶"), Diff(EQUAL,"Number of traces > 600  turning tracing off¶")]]]></diff>
  </Command>
  <Command __id="1111" _type="PauseCommand" date="Tue May 03 18:01:36 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="12112257">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5755]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1110" _type="ConsoleOutput" date="Tue May 03 18:01:36 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="12112257" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):9126
Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):9126¶"), Diff(EQUAL,"Number of traces > 600  turning tracing off¶")]]]></diff>
  </Command>
  <Command __id="1113" _type="PauseCommand" date="Tue May 03 18:01:37 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="12113522">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1265]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1112" _type="ConsoleOutput" date="Tue May 03 18:01:37 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="12113522" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1254
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"9"), Diff(EQUAL,"12"), Diff(DELETE,"6¶Number of traces > 600  turning tracing off"), Diff(INSERT,"54"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1115" _type="PauseCommand" date="Tue May 03 18:01:40 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="12116325">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2803]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1114" _type="ConsoleOutput" date="Tue May 03 18:01:40 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="12116325" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2796
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"1254"), Diff(INSERT,"2796"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1117" _type="PauseCommand" date="Tue May 03 18:01:43 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="12119032">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2707]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1116" _type="ConsoleOutput" date="Tue May 03 18:01:43 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="12119032" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2701
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):27"), Diff(DELETE,"96"), Diff(INSERT,"01"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1119" _type="PauseCommand" date="Tue May 03 18:01:46 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="12121763">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2731]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1118" _type="ConsoleOutput" date="Tue May 03 18:01:46 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="12121763" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2723
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):27"), Diff(DELETE,"01"), Diff(INSERT,"23"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1121" _type="PauseCommand" date="Tue May 03 18:02:54 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="12190182">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[68418]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1120" _type="ShellCommand" date="Tue May 03 18:02:54 EDT 2022" starttimestamp="1651603184346" timestamp="12190181" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1123" _type="PauseCommand" date="Tue May 03 18:02:55 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="12191518">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1337]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1122" _type="ShellCommand" date="Tue May 03 18:02:55 EDT 2022" starttimestamp="1651603184346" timestamp="12191518" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1125" _type="PauseCommand" date="Tue May 03 18:21:12 EDT 2022" range="10m-20m" starttimestamp="1651603184346" timestamp="13287849">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1096331]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1124" _type="ShellCommand" date="Tue May 03 18:21:12 EDT 2022" starttimestamp="1651603184346" timestamp="13287849" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1126" _type="ShellCommand" date="Tue May 03 18:21:13 EDT 2022" starttimestamp="1651603184346" timestamp="13288815" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1128" _type="PauseCommand" date="Tue May 03 18:21:15 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="13291439">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2624]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1127" _type="ShellCommand" date="Tue May 03 18:21:15 EDT 2022" starttimestamp="1651603184346" timestamp="13291439" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1129" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 18:21:15 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="13291622" type="Run" />
  <Command __id="1130" _type="ProgramExecutionEvent" className="/joshep_A4/src/a4/RunFA21A4Tests.java" date="Tue May 03 18:21:15 EDT 2022" kind="HitBreakPoint" projectName="joshep_A4" starttimestamp="1651603184346" timestamp="13291622" type="Run" />
  <Command __id="1131" _type="ShellCommand" date="Tue May 03 18:21:16 EDT 2022" starttimestamp="1651603184346" timestamp="13292116" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1133" _type="PauseCommand" date="Tue May 03 18:22:12 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="13348312">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[56196]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1132" _type="ShellCommand" date="Tue May 03 18:22:12 EDT 2022" starttimestamp="1651603184346" timestamp="13348312" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1135" _type="PauseCommand" date="Tue May 03 18:22:35 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="13371256">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22944]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1134" _type="ShellCommand" date="Tue May 03 18:22:35 EDT 2022" starttimestamp="1651603184346" timestamp="13371256" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1136" _type="ShellCommand" date="Tue May 03 18:22:35 EDT 2022" starttimestamp="1651603184346" timestamp="13371577" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1137" _type="ShellCommand" date="Tue May 03 18:22:36 EDT 2022" starttimestamp="1651603184346" timestamp="13372087" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1139" _type="PauseCommand" date="Tue May 03 18:22:47 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="13383242">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11155]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1138" _type="ShellCommand" date="Tue May 03 18:22:47 EDT 2022" starttimestamp="1651603184346" timestamp="13383242" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1141" _type="PauseCommand" date="Tue May 03 18:22:53 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="13388942">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5700]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1140" _type="ShellCommand" date="Tue May 03 18:22:53 EDT 2022" starttimestamp="1651603184346" timestamp="13388942" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1143" _type="PauseCommand" date="Tue May 03 18:22:56 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="13392148">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3206]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1142" _type="ShellCommand" date="Tue May 03 18:22:56 EDT 2022" starttimestamp="1651603184346" timestamp="13392148" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1144" _type="ShellCommand" date="Tue May 03 18:22:56 EDT 2022" starttimestamp="1651603184346" timestamp="13392596" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1146" _type="PauseCommand" date="Tue May 03 18:23:05 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="13401509">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8913]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1145" _type="ShellCommand" date="Tue May 03 18:23:05 EDT 2022" starttimestamp="1651603184346" timestamp="13401509" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1148" _type="PauseCommand" date="Tue May 03 18:23:07 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="13403269">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1760]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1147" _type="ShellCommand" date="Tue May 03 18:23:07 EDT 2022" starttimestamp="1651603184346" timestamp="13403269" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1150" _type="PauseCommand" date="Tue May 03 18:23:37 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="13432836">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[29567]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1149" _type="ShellCommand" date="Tue May 03 18:23:37 EDT 2022" starttimestamp="1651603184346" timestamp="13432836" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1151" _type="ShellCommand" date="Tue May 03 18:23:37 EDT 2022" starttimestamp="1651603184346" timestamp="13433570" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1153" _type="PauseCommand" date="Tue May 03 18:23:43 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="13438880">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5310]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1152" _type="ShellCommand" date="Tue May 03 18:23:43 EDT 2022" starttimestamp="1651603184346" timestamp="13438880" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1154" _type="ShellCommand" date="Tue May 03 18:23:44 EDT 2022" starttimestamp="1651603184346" timestamp="13439793" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1156" _type="PauseCommand" date="Tue May 03 18:23:49 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="13444829">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5036]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1155" _type="ShellCommand" date="Tue May 03 18:23:49 EDT 2022" starttimestamp="1651603184346" timestamp="13444829" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1158" _type="PauseCommand" date="Tue May 03 18:24:07 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="13463610">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18781]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1157" _type="ShellCommand" date="Tue May 03 18:24:07 EDT 2022" starttimestamp="1651603184346" timestamp="13463610" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1160" _type="PauseCommand" date="Tue May 03 18:33:31 EDT 2022" range="5m-10m" starttimestamp="1651603184346" timestamp="14027258">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[563648]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1159" _type="ShellCommand" date="Tue May 03 18:33:31 EDT 2022" starttimestamp="1651603184346" timestamp="14027258" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1161" _type="ShellCommand" date="Tue May 03 18:33:32 EDT 2022" starttimestamp="1651603184346" timestamp="14028188" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1163" _type="PauseCommand" date="Tue May 03 18:33:50 EDT 2022" range="10s-20s" starttimestamp="1651603184346" timestamp="14046339">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18151]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1162" _type="ShellCommand" date="Tue May 03 18:33:50 EDT 2022" starttimestamp="1651603184346" timestamp="14046339" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1165" _type="PauseCommand" date="Tue May 03 18:33:54 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="14050302">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3963]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1164" _type="ShellCommand" date="Tue May 03 18:33:54 EDT 2022" starttimestamp="1651603184346" timestamp="14050302" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1167" _type="PauseCommand" date="Tue May 03 18:39:44 EDT 2022" range="5m-10m" starttimestamp="1651603184346" timestamp="14400113">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[349811]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="1166" _type="BalloonCommand" date="Tue May 03 18:39:44 EDT 2022" message="*******************************************
Worked 6 minutes(fixed)/26 minutes(context based) from
Tue May 03 17:39:44 EDT 2022 to Tue May 03 18:33:54 EDT 2022
Edited 0 Projects: 
Edited 0 Files: 
Number of insert: 0
Number of delete: 0
" starttimestamp="1651603184346" timestamp="14400113">
    <fineGrainedWorkTime><![CDATA[26]]></fineGrainedWorkTime>
    <insert><![CDATA[0]]></insert>
    <startTime><![CDATA[1651613984458]]></startTime>
    <endTime><![CDATA[1651617234648]]></endTime>
    <workTime><![CDATA[6]]></workTime>
    <delete><![CDATA[0]]></delete>
  </Command>
  <Command __id="1169" _type="PauseCommand" date="Tue May 03 18:45:13 EDT 2022" range="5m-10m" starttimestamp="1651603184346" timestamp="14729308">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[329195]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1168" _type="ShellCommand" date="Tue May 03 18:45:13 EDT 2022" starttimestamp="1651603184346" timestamp="14729308" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1171" _type="PauseCommand" date="Tue May 03 18:45:48 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="14764405">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[35097]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1170" _type="ShellCommand" date="Tue May 03 18:45:48 EDT 2022" starttimestamp="1651603184346" timestamp="14764405" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1173" _type="PauseCommand" date="Tue May 03 18:46:42 EDT 2022" range="30s-1m" starttimestamp="1651603184346" timestamp="14817789">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[53384]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1172" _type="ShellCommand" date="Tue May 03 18:46:42 EDT 2022" starttimestamp="1651603184346" timestamp="14817789" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1175" _type="PauseCommand" date="Tue May 03 18:46:43 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="14819044">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1255]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1174" _type="ShellCommand" date="Tue May 03 18:46:43 EDT 2022" starttimestamp="1651603184346" timestamp="14819044" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1177" _type="PauseCommand" date="Tue May 03 18:51:05 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="15081553">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[262509]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1176" _type="ShellCommand" date="Tue May 03 18:51:05 EDT 2022" starttimestamp="1651603184346" timestamp="15081553" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1178" _type="ShellCommand" date="Tue May 03 18:51:06 EDT 2022" starttimestamp="1651603184346" timestamp="15082540" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1180" _type="PauseCommand" date="Tue May 03 18:54:09 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="15265132">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[182592]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1179" _type="ShellCommand" date="Tue May 03 18:54:09 EDT 2022" starttimestamp="1651603184346" timestamp="15265132" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1181" _type="ShellCommand" date="Tue May 03 18:54:10 EDT 2022" starttimestamp="1651603184346" timestamp="15265943" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1183" _type="PauseCommand" date="Tue May 03 18:57:44 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="15480469">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[214526]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1182" _type="ShellCommand" date="Tue May 03 18:57:44 EDT 2022" starttimestamp="1651603184346" timestamp="15480469" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1185" _type="PauseCommand" date="Tue May 03 18:57:46 EDT 2022" range="1s-2s" starttimestamp="1651603184346" timestamp="15482322">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1853]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1184" _type="ShellCommand" date="Tue May 03 18:57:46 EDT 2022" starttimestamp="1651603184346" timestamp="15482322" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1187" _type="PauseCommand" date="Tue May 03 19:00:16 EDT 2022" range="2m-5m" starttimestamp="1651603184346" timestamp="15632311">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[149989]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1186" _type="ShellCommand" date="Tue May 03 19:00:16 EDT 2022" starttimestamp="1651603184346" timestamp="15632311" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1189" _type="PauseCommand" date="Tue May 03 19:00:18 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="15634323">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2012]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1188" _type="ShellCommand" date="Tue May 03 19:00:18 EDT 2022" starttimestamp="1651603184346" timestamp="15634323" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1191" _type="PauseCommand" date="Tue May 03 19:00:21 EDT 2022" range="2s-5s" starttimestamp="1651603184346" timestamp="15636807">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2484]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1190" _type="ShellCommand" date="Tue May 03 19:00:21 EDT 2022" starttimestamp="1651603184346" timestamp="15636807" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1193" _type="PauseCommand" date="Tue May 03 19:00:42 EDT 2022" range="20s-30s" starttimestamp="1651603184346" timestamp="15658637">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[21830]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1192" _type="ShellCommand" date="Tue May 03 19:00:42 EDT 2022" starttimestamp="1651603184346" timestamp="15658637" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1195" _type="PauseCommand" date="Tue May 03 19:02:01 EDT 2022" range="1m-2m" starttimestamp="1651603184346" timestamp="15737007">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[78370]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1203" _type="ExceptionCommand" date="Tue May 03 19:03:05 EDT 2022" starttimestamp="1651603184346" timestamp="15801041" type="Exception">
    <exceptionString><![CDATA[java.nio.file.NoSuchFileException: C:\Users\User\eclipse-workspace\SML\src\Logs\LocalChecks\comp524f21_assignment4_F21Assignment4SuiteFineGrained.csv
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:478)
	at java.base/java.nio.file.Files.newOutputStream(Files.java:220)
	at java.base/java.nio.file.Files.newBufferedWriter(Files.java:2920)
	at grader.basics.observers.AnAbstractTestLogFileWriter.maybeCreateOrLoadSecondAppendableFile(AnAbstractTestLogFileWriter.java:314)
	at grader.basics.observers.AnAbstractTestLogFileWriter.maybeCreateOrLoadAppendableFile(AnAbstractTestLogFileWriter.java:296)
	at grader.basics.observers.AFineGrainedTestLogFileWriter.testRunStarted(AFineGrainedTestLogFileWriter.java:111)
	at org.junit.runner.notification.SynchronizedRunListener.testRunStarted(SynchronizedRunListener.java:35)
	at org.junit.runner.notification.RunNotifier$1.notifyListener(RunNotifier.java:91)
	at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:72)
	at org.junit.runner.notification.RunNotifier.fireTestRunStarted(RunNotifier.java:88)
	at grader.basics.junit.AGradableJUnitTopLevelSuite.testRunStarted(AGradableJUnitTopLevelSuite.java:107)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:184)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6638)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6400)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5011)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4918)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4556)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4488)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4843)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1205" _type="ConsoleOutput" date="Tue May 03 19:03:05 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="15801148" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Found a source file:C:\Users\User\eclipse-workspace\SML\src\Greeting.sml¶Assuming src folder is:C:\Users\User\eclipse-workspace\SML\src"), Diff(INSERT,"Test execution time (ms):2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1206" _type="ExceptionCommand" date="Tue May 03 19:03:06 EDT 2022" starttimestamp="1651603184346" timestamp="15801744" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.PrintSafety.test(PrintSafety.java:39)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1207" _type="ExceptionCommand" date="Tue May 03 19:03:06 EDT 2022" starttimestamp="1651603184346" timestamp="15802292" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.ConcisePrintSafety.test(ConcisePrintSafety.java:33)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1208" _type="ExceptionCommand" date="Tue May 03 19:03:07 EDT 2022" starttimestamp="1651603184346" timestamp="15802843" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.ListPrintSafety.test(ListPrintSafety.java:45)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1209" _type="ExceptionCommand" date="Tue May 03 19:03:07 EDT 2022" starttimestamp="1651603184346" timestamp="15803373" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.MatchingSafe.test(MatchingSafe.java:42)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1210" _type="ExceptionCommand" date="Tue May 03 19:03:08 EDT 2022" starttimestamp="1651603184346" timestamp="15803907" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.MatchingGivenSafe.test(MatchingGivenSafe.java:33)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1211" _type="ConsoleOutput" date="Tue May 03 19:03:08 EDT 2022" overflow="false" starttimestamp="1651603184346" timestamp="15804185" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):2"), Diff(INSERT,"Number of traces > 600  turning tracing off"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1212" _type="ExceptionCommand" date="Tue May 03 19:03:08 EDT 2022" starttimestamp="1651603184346" timestamp="15804401" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:354)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:153)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:251)
	at grader.basics.execution.ARunnerInputStreamProcessor.newInput(ARunnerInputStreamProcessor.java:58)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:991)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:762)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:730)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:256)
	at grader.basics.execution.BasicProcessRunner.run(BasicProcessRunner.java:210)
	at grader.basics.project.BasicProject.launch(BasicProject.java:544)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:90)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:54)
	at gradingTools.utils.RunningProjectUtils.runProject(RunningProjectUtils.java:63)
	at gradingTools.utils.RunningProjectUtils.runProjectandWithMainFile(RunningProjectUtils.java:48)
	at gradingTools.comp524f20.assignment3.AnAbstractSMLRunningProject.createRunningProject(AnAbstractSMLRunningProject.java:30)
	at gradingTools.comp524f20.assignment3.functionParamaters.MatchingDerivedSafe.test(MatchingDerivedSafe.java:34)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1214" _type="PauseCommand" date="Tue May 03 19:03:14 EDT 2022" range="5s-10s" starttimestamp="1651603184346" timestamp="15810086">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[5685]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
</Events>
